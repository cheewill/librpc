<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="service_8h" kind="file" language="C++">
    <compoundname>service.h</compoundname>
    <includes refid="object_8h" local="no">rpc/object.h</includes>
    <includes refid="connection_8h" local="no">rpc/connection.h</includes>
    <includedby refid="server_8h" local="no">/code/include/rpc/server.h</includedby>
    <incdepgraph>
      <node id="72">
        <label>stdbool.h</label>
      </node>
      <node id="73">
        <label>stdarg.h</label>
      </node>
      <node id="71">
        <label>stdint.h</label>
      </node>
      <node id="76">
        <label>rpc/connection.h</label>
        <link refid="connection_8h"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>sys/types.h</label>
      </node>
      <node id="70">
        <label>rpc/object.h</label>
        <link refid="object_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>sys/uio.h</label>
      </node>
      <node id="77">
        <label>Block.h</label>
      </node>
      <node id="78">
        <label>sys/time.h</label>
      </node>
      <node id="69">
        <label>/code/include/rpc/service.h</label>
        <link refid="service_8h"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="80">
        <label>/code/include/rpc/server.h</label>
        <link refid="server_8h"/>
      </node>
      <node id="79">
        <label>/code/include/rpc/service.h</label>
        <link refid="service_8h"/>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structrpc__if__method" prot="public">rpc_if_method</innerclass>
    <innerclass refid="structrpc__if__property" prot="public">rpc_if_property</innerclass>
    <innerclass refid="structrpc__if__member" prot="public">rpc_if_member</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="service_8h_1ae056c0203329d7432e0361c2f389bdec" prot="public" static="no">
        <name>__unsafe_unretained</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="46" column="9" bodyfile="/code/include/rpc/service.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a4c7094875a0bd8cc87e7c1d24a4481a6" prot="public" static="no">
        <name>RPC_FUNCTION_STILL_RUNNING</name>
        <initializer>((<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>)1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Marks the function as &quot;still running&quot; even though the implementing call returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="55" column="9" bodyfile="/code/include/rpc/service.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a4395f88fcaac71516f1fc2ba4d594c63" prot="public" static="no">
        <name>RPC_DISCOVERABLE_INTERFACE</name>
        <initializer>&quot;com.twoporeguys.librpc.Discoverable&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="57" column="9" bodyfile="/code/include/rpc/service.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a29c88b53b39ac5d6e93a1285968db34b" prot="public" static="no">
        <name>RPC_INTROSPECTABLE_INTERFACE</name>
        <initializer>&quot;com.twoporeguys.librpc.Introspectable&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="58" column="9" bodyfile="/code/include/rpc/service.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a6c627e2b2a7578de3a34131e51f14577" prot="public" static="no">
        <name>RPC_OBSERVABLE_INTERFACE</name>
        <initializer>&quot;com.twoporeguys.librpc.Observable&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="59" column="9" bodyfile="/code/include/rpc/service.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1aab7d9b8cc8af170d750fb53d752457fa" prot="public" static="no">
        <name>RPC_DEFAULT_INTERFACE</name>
        <initializer>&quot;com.twoporeguys.librpc.Default&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="60" column="9" bodyfile="/code/include/rpc/service.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a5484afe5b3f646a7989ad91e011cc5b1" prot="public" static="no">
        <name>RPC_FUNCTION</name>
        <param><defname>_fn</defname></param>
        <initializer>^(void *_cookie, <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _args) {				\
		return ((<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>)_fn(_cookie, _args));		\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A macro to convert function pointer into <ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref> block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="113" column="9" bodyfile="/code/include/rpc/service.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a9f26d5c3cd4053019f402fa48d59d4c7" prot="public" static="no">
        <name>RPC_PROPERTY_GETTER</name>
        <param><defname>_fn</defname></param>
        <initializer>^(void *_cookie) {						\
		return ((<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>)_fn(_cookie));			\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="118" column="9" bodyfile="/code/include/rpc/service.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1ae4fea18e9501ac8051f8c674a81d5432" prot="public" static="no">
        <name>RPC_PROPERTY_SETTER</name>
        <param><defname>_fn</defname></param>
        <initializer>^(void *_cookie, <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _value) {				\
		_fn(_cookie, _value);					\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="123" column="9" bodyfile="/code/include/rpc/service.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a48571f82fd8c922efdce9b1a13c782df" prot="public" static="no">
        <name>RPC_ABORT_HANDLER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(void *_cookie) {						\
		_fn(_arg);						\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="128" column="9" bodyfile="/code/include/rpc/service.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a311d28feffd55aea4c79aba5c45ef34f" prot="public" static="no">
        <name>RPC_EVENT</name>
        <param><defname>_name</defname></param>
        <initializer>{								\
		.rim_type = <ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a09012f2433454a86df08ee430a0378f2" kindref="member">RPC_MEMBER_EVENT</ref>,				\
		.rim_name = (#_name)					\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="133" column="9" bodyfile="/code/include/rpc/service.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1acbb40848a04a99a67fa65f1a103af208" prot="public" static="no">
        <name>RPC_PROPERTY_RO</name>
        <param><defname>_name</defname></param>
        <param><defname>_getter</defname></param>
        <initializer>{								\
		.rim_type = <ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3576bdd6edc3d94a5e60a91a1006ab72" kindref="member">RPC_MEMBER_PROPERTY</ref>,			\
		.rim_name = (#_name),					\
		.rim_property = {					\
                        .rp_getter = RPC_PROPERTY_GETTER(_getter),	\
			.rp_setter = NULL,				\
			.rp_arg = NULL					\
                }							\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience macro to declare read-only property in the vtable array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="142" column="9" bodyfile="/code/include/rpc/service.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a6ea5b0d468e84170d93e3afeaed4d5b6" prot="public" static="no">
        <name>RPC_PROPERTY_WO</name>
        <param><defname>_name</defname></param>
        <param><defname>_setter</defname></param>
        <initializer>{								\
		.rim_type = <ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3576bdd6edc3d94a5e60a91a1006ab72" kindref="member">RPC_MEMBER_PROPERTY</ref>,			\
		.rim_name = (#_name),					\
		.rim_property = {					\
                        .rp_getter = NULL,				\
			.rp_setter = RPC_PROPERTY_SETTER(_setter),	\
			.rp_arg = NULL					\
                }							\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience macro to declare write-only property in the vtable array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="156" column="9" bodyfile="/code/include/rpc/service.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a6f39d78ec8fde43f05f7805fddc525d4" prot="public" static="no">
        <name>RPC_PROPERTY_RW</name>
        <param><defname>_name</defname></param>
        <param><defname>_getter</defname></param>
        <param><defname>_setter</defname></param>
        <initializer>{								\
		.rim_type = <ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3576bdd6edc3d94a5e60a91a1006ab72" kindref="member">RPC_MEMBER_PROPERTY</ref>,			\
		.rim_name = (#_name),					\
		.rim_property = {					\
                        .rp_getter = RPC_PROPERTY_GETTER(_getter),	\
			.rp_setter = RPC_PROPERTY_SETTER(_setter),	\
			.rp_arg = NULL					\
                }							\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience macro to declare read-write property in the vtable array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="170" column="9" bodyfile="/code/include/rpc/service.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a3b7ed0fba131ae55d90cbf5deb8cba5d" prot="public" static="no">
        <name>RPC_METHOD</name>
        <param><defname>_name</defname></param>
        <param><defname>_fn</defname></param>
        <initializer>{								\
		.rim_type = <ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3b8dba044cf7b9b552bc4e3a3437a94a" kindref="member">RPC_MEMBER_METHOD</ref>,				\
		.rim_name = (#_name),					\
		.rim_method = {						\
                        .rm_block = <ref refid="service_8h_1a5484afe5b3f646a7989ad91e011cc5b1" kindref="member">RPC_FUNCTION</ref>(_fn),			\
			.rm_arg = NULL					\
                }							\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience macro to declare RPC method in the vtable array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="184" column="9" bodyfile="/code/include/rpc/service.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a1b9446e9faacdac7aae6e9e8601ebff3" prot="public" static="no">
        <name>RPC_METHOD_BLOCK</name>
        <param><defname>_name</defname></param>
        <param><defname>_block</defname></param>
        <initializer>{								\
		.rim_type = <ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3b8dba044cf7b9b552bc4e3a3437a94a" kindref="member">RPC_MEMBER_METHOD</ref>,				\
		.rim_name = (#_name),					\
		.rim_method = {						\
                        .rm_block = (_block),				\
                }							\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="service_8h_1a3b7ed0fba131ae55d90cbf5deb8cba5d" kindref="member">RPC_METHOD</ref>, but takes a block instead of a function pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="198" column="9" bodyfile="/code/include/rpc/service.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="service_8h_1a913ddea4988fc01d3aff55fa82b9c8eb" prot="public" static="no">
        <name>RPC_MEMBER_END</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="207" column="9" bodyfile="/code/include/rpc/service.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="service_8h_1a543850b4e1fac65207114c51d9c3f1a4" prot="public" static="no">
        <name>rpc_if_member_type</name>
        <enumvalue id="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a09012f2433454a86df08ee430a0378f2" prot="public">
          <name>RPC_MEMBER_EVENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event member </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3576bdd6edc3d94a5e60a91a1006ab72" prot="public">
          <name>RPC_MEMBER_PROPERTY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Property member </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3b8dba044cf7b9b552bc4e3a3437a94a" prot="public">
          <name>RPC_MEMBER_METHOD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Method member </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates possible kinds of RPC interface members. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="213" column="1" bodyfile="/code/include/rpc/service.h" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="enum" id="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926" prot="public" static="no">
        <name>rpc_property_rights</name>
        <enumvalue id="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926a2573aa57a92525ca22dad5ff517bc9d0" prot="public">
          <name>RPC_PROPERTY_READ</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Property is readable </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926aea82a0471278ee17a5ea4b53afb43aee" prot="public">
          <name>RPC_PROPERTY_WRITE</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Property is writable </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates possible property right flags. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="223" column="1" bodyfile="/code/include/rpc/service.h" bodystart="222" bodyend="226"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" prot="public" static="no">
        <type>struct rpc_context *</type>
        <definition>typedef struct rpc_context* rpc_context_t</definition>
        <argsstring></argsstring>
        <name>rpc_context_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RPC context handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="75" column="1" bodyfile="/code/include/rpc/service.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service_8h_1afd1294bd7ea02592ecc002e1576ef290" prot="public" static="no">
        <type>struct rpc_instance *</type>
        <definition>typedef struct rpc_instance* rpc_instance_t</definition>
        <argsstring></argsstring>
        <name>rpc_instance_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RPC instance handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="80" column="1" bodyfile="/code/include/rpc/service.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" prot="public" static="no">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>(^</type>
        <definition>typedef _Nullable rpc_object_t(^ rpc_function_t) (void *_Nonnull cookie, _Nonnull rpc_object_t args)</definition>
        <argsstring>)(void *_Nonnull cookie, _Nonnull rpc_object_t args)</argsstring>
        <name>rpc_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="85" column="1" bodyfile="/code/include/rpc/service.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service_8h_1add2d357ed7db564684628b3467048431" prot="public" static="no">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>(*</type>
        <definition>typedef _Nullable rpc_object_t(* rpc_function_f) (void *_Nonnull cookie, _Nonnull rpc_object_t args)</definition>
        <argsstring>)(void *_Nonnull cookie, _Nonnull rpc_object_t args)</argsstring>
        <name>rpc_function_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method function type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="91" column="1" bodyfile="/code/include/rpc/service.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service_8h_1ab438f0c33f3f3876f1c9a23d62134f16" prot="public" static="no">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>(^</type>
        <definition>typedef _Nullable rpc_object_t(^ rpc_property_getter_t) (void *_Nonnull cookie)</definition>
        <argsstring>)(void *_Nonnull cookie)</argsstring>
        <name>rpc_property_getter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Property getter block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="97" column="1" bodyfile="/code/include/rpc/service.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service_8h_1aa8b38d8ab3bafe79a96edaebafe13b8d" prot="public" static="no">
        <type>void(^</type>
        <definition>typedef void(^ rpc_property_setter_t) (void *_Nonnull cookie, _Nonnull rpc_object_t value)</definition>
        <argsstring>)(void *_Nonnull cookie, _Nonnull rpc_object_t value)</argsstring>
        <name>rpc_property_setter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Property setter block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="102" column="1" bodyfile="/code/include/rpc/service.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service_8h_1aebbaf8e39f128b6655d23aad6a8ab634" prot="public" static="no">
        <type>void(^</type>
        <definition>typedef void(^ rpc_abort_handler_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>rpc_abort_handler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asynchronous abort handler block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="108" column="1" bodyfile="/code/include/rpc/service.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="service_8h_1aa53a346b1f60759fabc2f047e75fdb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
        <definition>_Nonnull rpc_context_t rpc_context_create</definition>
        <argsstring>(void)</argsstring>
        <name>rpc_context_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new RPC context.</para><para><simplesect kind="return"><para>Newly created RPC context object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a4f63ab83623a2f407eac2fe9b7f80023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_context_free</definition>
        <argsstring>(_Nonnull rpc_context_t context)</argsstring>
        <name>rpc_context_free</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disposes existing RPC context and frees all associated resources.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to dispose </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a6887149a7aecd3874cb19f24fc766d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
        <definition>_Nullable rpc_instance_t rpc_context_find_instance</definition>
        <argsstring>(_Nonnull rpc_context_t context, const char *_Nullable path)</argsstring>
        <name>rpc_context_find_instance</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds an instance registered in <computeroutput>context</computeroutput>.</para><para>If no path is given, returns the context default instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC context handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance path </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RPC instance handle or NULL if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a099a8fc4046be7999da0454548825513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
        <definition>_Nonnull rpc_instance_t rpc_context_get_root</definition>
        <argsstring>(_Nonnull rpc_context_t context)</argsstring>
        <name>rpc_context_get_root</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns root instance associated with <computeroutput>context</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC context handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RPC instance handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1acfa9c9b0063bd316850e8a58878cb44e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_context_register_instance</definition>
        <argsstring>(_Nonnull rpc_context_t context, _Nonnull rpc_instance_t instance)</argsstring>
        <name>rpc_context_register_instance</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a new instance in <computeroutput>context</computeroutput> instance tree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC context handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ae6d86450498479f51012a50bd973e273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_context_unregister_instance</definition>
        <argsstring>(_Nonnull rpc_context_t context, const char *_Nonnull path)</argsstring>
        <name>rpc_context_unregister_instance</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1afdc2720f56729686fea39d6bb498da37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_context_register_member</definition>
        <argsstring>(_Nonnull rpc_context_t context, const char *_Nullable interface, struct rpc_if_member *_Nonnull m)</argsstring>
        <name>rpc_context_register_member</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>struct <ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref> *_Nonnull</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a given rpc_method structure as an RPC method in a given context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Target context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC method structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ac0a7c2d5e6bb7464de61d346f97c0b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_context_register_block</definition>
        <argsstring>(_Nonnull rpc_context_t context, const char *_Nullable interface, const char *_Nonnull name, void *_Nullable arg, _Nonnull rpc_function_t func)</argsstring>
        <name>rpc_context_register_block</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *_Nullable</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a given block as a RPC method for a given context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Target context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Method name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Method description. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Method context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC method block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a1aac077f97529f7c26834c139fefc2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_context_register_func</definition>
        <argsstring>(_Nonnull rpc_context_t context, const char *_Nullable interface, const char *_Nonnull name, void *_Nullable arg, _Nonnull rpc_function_f func)</argsstring>
        <name>rpc_context_register_func</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *_Nullable</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="service_8h_1add2d357ed7db564684628b3467048431" kindref="member">rpc_function_f</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a given function as a RPC method for a given context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Target context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Method name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>Method description. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Method context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC method function </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a7ad6475e7ca46534421ce0c3245d0cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_context_unregister_member</definition>
        <argsstring>(_Nonnull rpc_context_t context, const char *_Nullable interface, const char *_Nonnull name)</argsstring>
        <name>rpc_context_unregister_member</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregisters a given RPC method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Target context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Method name. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a5eb243586ec426274b93ad40f64f0ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_context_set_pre_call_hook</definition>
        <argsstring>(_Nonnull rpc_context_t context, _Nonnull rpc_function_t fn)</argsstring>
        <name>rpc_context_set_pre_call_hook</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Installs a hook for every RPC function called.</para><para>The hook will be called before an actual implementation of RPC function gets called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Target context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Hook function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a6b62e56dbc71d17c4094d2cfec863712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_context_set_post_call_hook</definition>
        <argsstring>(_Nonnull rpc_context_t context, _Nonnull rpc_function_t fn)</argsstring>
        <name>rpc_context_set_post_call_hook</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Installs a hook for every RPC function called.</para><para>The hook will be called after an actual implementation of RPC function is called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Target context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Hook function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1adf89ac4a7b3a1e436b03a482eb366639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
        <definition>_Nullable rpc_call_t rpc_context_dispatch_call</definition>
        <argsstring>(_Nonnull rpc_context_t context, const char *_Nonnull name, _Nullable rpc_object_t args)</argsstring>
        <name>rpc_context_dispatch_call</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC context handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a1665198f8dc86a0775adef55c01d843e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_context_emit_event</definition>
        <argsstring>(_Nonnull rpc_context_t context, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull name, _Nonnull rpc_object_t args)</argsstring>
        <name>rpc_context_emit_event</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notifies interested listeners of changes to the instance at <computeroutput>path</computeroutput>.</para><para>If no path is specified the context default instance is assumed. If there is no interface specified, RPC_DEFAULT_INTERFACE will be used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Data specific to the event </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ad820e18677b7171a41b0f0135600bbc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *_Nullable</type>
        <definition>void* _Nullable rpc_function_get_arg</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_get_arg</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the argument associated with method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1aea3d4b8ab491b9ab4451ea8851f6e9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nonnull <ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
        <definition>_Nonnull rpc_context_t rpc_function_get_context</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_get_context</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the RPC context handle associated with currently executing function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RPC context handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ad148128984ab4c5bab8ff124c6796344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
        <definition>_Nonnull rpc_instance_t rpc_function_get_instance</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_get_instance</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the instance handle associated with currently executing function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RPC context handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1afa036dc361d52333f0360b556ddf28f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *_Nonnull</type>
        <definition>const char* _Nonnull rpc_function_get_name</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_get_name</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the called method name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a023e49d1050b5d175dd0ab8a5da03a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *_Nonnull</type>
        <definition>const char* _Nonnull rpc_function_get_path</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_get_path</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the path method was called on or NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a87cbfb7e78c20de95c11ebd17b041c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *_Nonnull</type>
        <definition>const char* _Nonnull rpc_function_get_interface</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_get_interface</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the called interface name or NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a1c8603d576553224db42579cb9180d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_function_respond</definition>
        <argsstring>(void *_Nonnull cookie, _Nullable rpc_object_t object)</argsstring>
        <name>rpc_function_respond</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a response to a call.</para><para>This function may be called only once during the lifetime of a single call (for a given cookie). When called, return value of a method is silently ignored (it is preferred to return NULL).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Response. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a8199576424cc9470380ab43248129911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_function_error</definition>
        <argsstring>(void *_Nonnull cookie, int code, const char *_Nonnull message,...)</argsstring>
        <name>rpc_function_error</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>message</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends an error response to a call.</para><para>This function may be called only once during the lifetime of a single call (for a given cookie). When called, return value of a method is silently ignored (it is preferred to return NULL).</para><para>When called in a streaming function, implicitly ends streaming response.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error (errno) code </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Error message format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Format arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a89abe6ee2bcc59409eaccf1955ada0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_function_error_ex</definition>
        <argsstring>(void *_Nonnull cookie, _Nonnull rpc_object_t exception)</argsstring>
        <name>rpc_function_error_ex</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>exception</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reports an exception for a given ongoing call identifier.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ac8c50ecedc9e59086e1ab63e1dd6c425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_function_yield</definition>
        <argsstring>(void *_Nonnull cookie, _Nonnull rpc_object_t fragment)</argsstring>
        <name>rpc_function_yield</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>fragment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a new value in a streaming response.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment</parametername>
</parameternamelist>
<parameterdescription>
<para>Next data fragment </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status. Success is reported by returning 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a5f0f3252a2c4e12050419519afe64e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_function_end</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_end</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ends a streaming response.</para><para>When that function is called, sending further responses (either singular, streaming or error responses) is not allowed. Return value of a method functions is ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a6018b6f71a3d1af7494125b8ba22f981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_function_kill</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_kill</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asynchronously abort a running call on the server.</para><para>This function makes <ref refid="service_8h_1ad0185b8a60875843d91ca00b3e8d4886" kindref="member">rpc_function_should_abort</ref> return <computeroutput>true</computeroutput> and a running <ref refid="service_8h_1ac8c50ecedc9e59086e1ab63e1dd6c425" kindref="member">rpc_function_yield</ref> to return immediately with an error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ad0185b8a60875843d91ca00b3e8d4886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_function_should_abort</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_function_should_abort</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value of a flag saying whether or not a method should immediately stop because it was aborted on the client side.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether or not function should abort </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a4b6ceb43e090fda8928a3a46e7da614a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_function_set_async_abort_handler</definition>
        <argsstring>(void *_Nonnull cookie, _Nullable rpc_abort_handler_t handler)</argsstring>
        <name>rpc_function_set_async_abort_handler</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="service_8h_1aebbaf8e39f128b6655d23aad6a8ab634" kindref="member">rpc_abort_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a callback to be called when running method got an abort signal from the client.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Abort handling block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a805d705c1a9f94cf4aa04bb71a46a928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
        <definition>_Nullable rpc_instance_t rpc_instance_new</definition>
        <argsstring>(void *_Nullable arg, const char *_Nonnull fmt,...)</argsstring>
        <name>rpc_instance_new</name>
        <param>
          <type>void *_Nullable</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new instance handle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>User data pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a913a58356a0366081127227d15a74cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_instance_set_description</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nonnull fmt,...)</argsstring>
        <name>rpc_instance_set_description</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the description string of an instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Format arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="561" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a661c65e4aa798fd4b63851e267f5c018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *_Nullable</type>
        <definition>void* _Nullable rpc_instance_get_arg</definition>
        <argsstring>(_Nonnull rpc_instance_t instance)</argsstring>
        <name>rpc_instance_get_arg</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the user data pointer associated with <computeroutput>instance</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>User data pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ad1901375c6ba0463bd572396682ed36f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *_Nonnull</type>
        <definition>const char* _Nonnull rpc_instance_get_path</definition>
        <argsstring>(_Nonnull rpc_instance_t instance)</argsstring>
        <name>rpc_instance_get_path</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>instance</computeroutput> path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Instance path </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1abca1b1b9d6d4a7ca012ca242e0adeafd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_instance_register_interface</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nonnull interface, const struct rpc_if_member *_Nullable vtable, void *_Nullable arg)</argsstring>
        <name>rpc_instance_register_interface</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref> *_Nullable</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *_Nullable</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers interface <computeroutput>interface</computeroutput> under <computeroutput>instance</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>Member virtual table (vtable) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>User data pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1aab9955f657aeadeee70c6472300eb695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_instance_unregister_interface</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nonnull interface)</argsstring>
        <name>rpc_instance_unregister_interface</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregisters interface <computeroutput>interface</computeroutput> from <computeroutput>instance</computeroutput> along with all interface members.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ae0782034f1232a190e4564704d2ebf69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_instance_register_member</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const struct rpc_if_member *_Nonnull member)</argsstring>
        <name>rpc_instance_register_member</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const struct <ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref> *_Nonnull</type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a single member of interface <computeroutput>interface</computeroutput> under <computeroutput>instance</computeroutput>.</para><para>If no interface is specified, RPC_DEFAULT_INTERFACE will be assumed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Intance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member descriptor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1aef405841a8e133586cc25dc794aa07d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_instance_unregister_member</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name)</argsstring>
        <name>rpc_instance_unregister_member</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregisters a previously registered member named <computeroutput>name</computeroutput> from interface <computeroutput>interface</computeroutput> on <computeroutput>instance</computeroutput>.</para><para>If no interface is specified, RPC_DEFAULT_INTERFACE will be assumed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1aaa36ef0229d484da716697daaccd4863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_instance_register_block</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name, void *_Nullable arg, _Nonnull rpc_function_t fn)</argsstring>
        <name>rpc_instance_register_block</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *_Nullable</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a new method called <computeroutput>name</computeroutput> on interface <computeroutput>interface</computeroutput> under instance <computeroutput>instance</computeroutput>.</para><para>If no interface is specified, RPC_DEFAULT_INTERFACE will be assumed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Method name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Method private data pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1aa8486642b6ff64df31c25ff5cd7ed566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_instance_register_func</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name, void *_Nullable arg, _Nonnull rpc_function_f fn)</argsstring>
        <name>rpc_instance_register_func</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *_Nullable</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="service_8h_1add2d357ed7db564684628b3467048431" kindref="member">rpc_function_f</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="service_8h_1aaa36ef0229d484da716697daaccd4863" kindref="member">rpc_instance_register_block</ref>, but takes a function pointer instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Method name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Method private data pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="658" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1ade5ebee7e5e8e06a3b41b667a6c2af6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref> *_Nullable</type>
        <definition>struct rpc_if_member* _Nullable rpc_instance_find_member</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name)</argsstring>
        <name>rpc_instance_find_member</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds member called <computeroutput>name</computeroutput> belonging to a <computeroutput>interface</computeroutput> in <computeroutput>instance</computeroutput>.</para><para>If no interface is specified, RPC_DEFAULT_INTERFACE will be assumed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref> structure pointer or <computeroutput>NULL</computeroutput> if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a8ad4da2277db627163ebae9ddb55582c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_instance_has_interface</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nonnull interface)</argsstring>
        <name>rpc_instance_has_interface</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells whether or not <computeroutput>instance</computeroutput> implements interface <computeroutput>interface</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if implemented, otherwise <computeroutput>false</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1af01103a96f4381c370148f726faea9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_instance_emit_event</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name, _Nonnull rpc_object_t args)</argsstring>
        <name>rpc_instance_emit_event</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notifies interested listeners of changes to the interface <computeroutput>interface</computeroutput>.</para><para>If there is no interface specified, RPC_DEFAULT_INTERFACE will be used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="695" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a1ff9720111598b3c51013771544970d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_instance_register_property</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name, void *_Nullable arg, _Nullable rpc_property_getter_t getter, _Nullable rpc_property_setter_t setter)</argsstring>
        <name>rpc_instance_register_property</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *_Nullable</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="service_8h_1ab438f0c33f3f3876f1c9a23d62134f16" kindref="member">rpc_property_getter_t</ref></type>
          <declname>getter</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="service_8h_1aa8b38d8ab3bafe79a96edaebafe13b8d" kindref="member">rpc_property_setter_t</ref></type>
          <declname>setter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers property named <computeroutput>name</computeroutput> on interface <computeroutput>interface</computeroutput> under instance <computeroutput>instance</computeroutput>.</para><para>If there is no interface specified, RPC_DEFAULT_INTERFACE will be used.</para><para>The property can be:<itemizedlist>
<listitem><para>read-only, when getter is non-NULL and setter is NULL</para></listitem><listitem><para>write-only, when getter is NULL and setter is non-NULL</para></listitem><listitem><para>read-write, when both getter and setter blocks are provided.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>User data pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getter</parametername>
</parameternamelist>
<parameterdescription>
<para>Getter block or NULL if write-only </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>setter</parametername>
</parameternamelist>
<parameterdescription>
<para>Setter block or NULL if read-nly </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a03541c6ffc17212e8f3e5df7b75f9988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_instance_get_property_rights</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name)</argsstring>
        <name>rpc_instance_get_property_rights</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns access rights of property <computeroutput>name</computeroutput> of interface <computeroutput>interface</computeroutput> implemented in instance <computeroutput>instance</computeroutput>.</para><para>If there is no interface specified, RPC_DEFAULT_INTERFACE will be used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1afa7ccad8a9f76a69b893d4ed8668e40c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_instance_register_event</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name)</argsstring>
        <name>rpc_instance_register_event</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a named event <computeroutput>name</computeroutput> to <computeroutput>interface</computeroutput>.</para><para>If there is no interface specified, the event will be added to the default interface RPC_DEFAULT_INTERFACE.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a693486a3b4444491bd4f6c75aa49f15b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_instance_property_changed</definition>
        <argsstring>(_Nonnull rpc_instance_t instance, const char *_Nullable interface, const char *_Nonnull name, _Nullable rpc_object_t value)</argsstring>
        <name>rpc_instance_property_changed</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notifies the librpc layer that property value has changed.</para><para>This function is used to notify remote property listeners that the value might have changed.</para><para>If <computeroutput>value</computeroutput> is <computeroutput>NULL</computeroutput>, then librpc will internally query the getter for the value.</para><para>If there is no interface specified, RPC_DEFAULT_INTERFACE will be used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New property value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1abec6b729eadcc1b83dd99b764db53a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
        <definition>_Nonnull rpc_instance_t rpc_property_get_instance</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_property_get_instance</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns instance associated with the getter or setter call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Running call identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Instance handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="777" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1a2829cbce768c9d60ac83d0547dc837ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *_Nullable</type>
        <definition>void* _Nullable rpc_property_get_arg</definition>
        <argsstring>(void *_Nonnull cookie)</argsstring>
        <name>rpc_property_get_arg</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the user data pointer associated with the currently running getter/setter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Property call handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>User data pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="786" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1af119057c34e0ac7b5ce6238d2551e3af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_property_error</definition>
        <argsstring>(void *_Nonnull cookie, int code, const char *_Nonnull fmt,...)</argsstring>
        <name>rpc_property_error</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicate that the current getter or setter run should generate an error.</para><para>After using this function, return value from the getter is ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Property call handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Message format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="798" column="1"/>
      </memberdef>
      <memberdef kind="function" id="service_8h_1aecd81447bced207f9d62b7fbf55cb4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_instance_free</definition>
        <argsstring>(_Nonnull rpc_instance_t instance)</argsstring>
        <name>rpc_instance_free</name>
        <param>
          <type>_Nonnull <ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases instance handle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/service.h" line="806" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>RPC service API. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2015-2017<sp/>Two<sp/>Pore<sp/>Guys,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>providing<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBRPC_SERVICE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRPC_SERVICE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="object_8h" kindref="compound">rpc/object.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="connection_8h" kindref="compound">rpc/connection.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__unsafe_unretained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="service_8h_1a4c7094875a0bd8cc87e7c1d24a4481a6" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_FUNCTION_STILL_RUNNING<sp/><sp/>((rpc_object_t)1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_DISCOVERABLE_INTERFACE<sp/><sp/>&quot;com.twoporeguys.librpc.Discoverable&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_INTROSPECTABLE_INTERFACE<sp/><sp/><sp/><sp/>&quot;com.twoporeguys.librpc.Introspectable&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_OBSERVABLE_INTERFACE<sp/><sp/><sp/><sp/>&quot;com.twoporeguys.librpc.Observable&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_DEFAULT_INTERFACE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;com.twoporeguys.librpc.Default&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_context;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_instance;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_context<sp/>*<ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_instance<sp/>*<ref refid="service_8h_1afd1294bd7ea02592ecc002e1576ef290" kindref="member">rpc_instance_t</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>(^<ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="service_8h_1add2d357ed7db564684628b3467048431" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>(*<ref refid="service_8h_1add2d357ed7db564684628b3467048431" kindref="member">rpc_function_f</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="service_8h_1ab438f0c33f3f3876f1c9a23d62134f16" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>(^<ref refid="service_8h_1ab438f0c33f3f3876f1c9a23d62134f16" kindref="member">rpc_property_getter_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="service_8h_1aa8b38d8ab3bafe79a96edaebafe13b8d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(^<ref refid="service_8h_1aa8b38d8ab3bafe79a96edaebafe13b8d" kindref="member">rpc_property_setter_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="service_8h_1aebbaf8e39f128b6655d23aad6a8ab634" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(^<ref refid="service_8h_1aebbaf8e39f128b6655d23aad6a8ab634" kindref="member">rpc_abort_handler_t</ref>)(void);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="service_8h_1a5484afe5b3f646a7989ad91e011cc5b1" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_FUNCTION(_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(void<sp/>*_cookie,<sp/>rpc_object_t<sp/>_args)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((rpc_object_t)_fn(_cookie,<sp/>_args));<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_PROPERTY_GETTER(_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(void<sp/>*_cookie)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((rpc_object_t)_fn(_cookie));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_PROPERTY_SETTER(_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(void<sp/>*_cookie,<sp/>rpc_object_t<sp/>_value)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fn(_cookie,<sp/>_value);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_ABORT_HANDLER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(void<sp/>*_cookie)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fn(_arg);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_EVENT(_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_type<sp/>=<sp/>RPC_MEMBER_EVENT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_name<sp/>=<sp/>(#_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="service_8h_1acbb40848a04a99a67fa65f1a103af208" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_PROPERTY_RO(_name,<sp/>_getter)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_type<sp/>=<sp/>RPC_MEMBER_PROPERTY,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_name<sp/>=<sp/>(#_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_property<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_getter<sp/>=<sp/>RPC_PROPERTY_GETTER(_getter),<sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_setter<sp/>=<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_arg<sp/>=<sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="service_8h_1a6ea5b0d468e84170d93e3afeaed4d5b6" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_PROPERTY_WO(_name,<sp/>_setter)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_type<sp/>=<sp/>RPC_MEMBER_PROPERTY,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_name<sp/>=<sp/>(#_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_property<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_getter<sp/>=<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_setter<sp/>=<sp/>RPC_PROPERTY_SETTER(_setter),<sp/><sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_arg<sp/>=<sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="service_8h_1a6f39d78ec8fde43f05f7805fddc525d4" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_PROPERTY_RW(_name,<sp/>_getter,<sp/>_setter)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_type<sp/>=<sp/>RPC_MEMBER_PROPERTY,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_name<sp/>=<sp/>(#_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_property<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_getter<sp/>=<sp/>RPC_PROPERTY_GETTER(_getter),<sp/><sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_setter<sp/>=<sp/>RPC_PROPERTY_SETTER(_setter),<sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rp_arg<sp/>=<sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="service_8h_1a3b7ed0fba131ae55d90cbf5deb8cba5d" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_METHOD(_name,<sp/>_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_type<sp/>=<sp/>RPC_MEMBER_METHOD,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_name<sp/>=<sp/>(#_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_method<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rm_block<sp/>=<sp/>RPC_FUNCTION(_fn),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rm_arg<sp/>=<sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="service_8h_1a1b9446e9faacdac7aae6e9e8601ebff3" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_METHOD_BLOCK(_name,<sp/>_block)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_type<sp/>=<sp/>RPC_MEMBER_METHOD,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_name<sp/>=<sp/>(#_name),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rim_method<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rm_block<sp/>=<sp/>(_block),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPC_MEMBER_END<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4" kindref="member">rpc_if_member_type</ref></highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214" refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a09012f2433454a86df08ee430a0378f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a09012f2433454a86df08ee430a0378f2" kindref="member">RPC_MEMBER_EVENT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215" refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3576bdd6edc3d94a5e60a91a1006ab72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3576bdd6edc3d94a5e60a91a1006ab72" kindref="member">RPC_MEMBER_PROPERTY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216" refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3b8dba044cf7b9b552bc4e3a3437a94a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4a3b8dba044cf7b9b552bc4e3a3437a94a" kindref="member">RPC_MEMBER_METHOD</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal">};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926" kindref="member">rpc_property_rights</ref></highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224" refid="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926a2573aa57a92525ca22dad5ff517bc9d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926a2573aa57a92525ca22dad5ff517bc9d0" kindref="member">RPC_PROPERTY_READ</ref><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>0),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225" refid="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926aea82a0471278ee17a5ea4b53afb43aee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="service_8h_1ae93cefa938d7efd2095f73e9dcdf8926aea82a0471278ee17a5ea4b53afb43aee" kindref="member">RPC_PROPERTY_WRITE</ref><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>1),<sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="structrpc__if__method" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrpc__if__method" kindref="compound">rpc_if_method</ref></highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>__unsafe_unretained<sp/>_Nonnull<sp/><ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref><sp/>rm_block;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>rm_arg;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="structrpc__if__property" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrpc__if__property" kindref="compound">rpc_if_property</ref></highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>__unsafe_unretained<sp/>_Nullable<sp/><ref refid="service_8h_1ab438f0c33f3f3876f1c9a23d62134f16" kindref="member">rpc_property_getter_t</ref><sp/>rp_getter;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>__unsafe_unretained<sp/>_Nullable<sp/><ref refid="service_8h_1aa8b38d8ab3bafe79a96edaebafe13b8d" kindref="member">rpc_property_setter_t</ref><sp/>rp_setter;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>rp_arg;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="structrpc__if__member" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rim_name;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4" kindref="member">rpc_if_member_type</ref><sp/><sp/><sp/><sp/><sp/>rim_type;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrpc__if__method" kindref="compound">rpc_if_method</ref><sp/><sp/><sp/><sp/>rim_method;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrpc__if__property" kindref="compound">rpc_if_property</ref><sp/><sp/>rim_property;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="260"><highlight class="normal">};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">_Nonnull<sp/>rpc_context_t<sp/><ref refid="service_8h_1aa53a346b1f60759fabc2f047e75fdb90" kindref="member">rpc_context_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a4f63ab83623a2f407eac2fe9b7f80023" kindref="member">rpc_context_free</ref>(_Nonnull<sp/>rpc_context_t<sp/>context);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">_Nullable<sp/>rpc_instance_t<sp/><ref refid="service_8h_1a6887149a7aecd3874cb19f24fc766d0f" kindref="member">rpc_context_find_instance</ref>(</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_context_t<sp/>context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">_Nonnull<sp/>rpc_instance_t<sp/><ref refid="service_8h_1a099a8fc4046be7999da0454548825513" kindref="member">rpc_context_get_root</ref>(_Nonnull<sp/>rpc_context_t<sp/>context);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1acfa9c9b0063bd316850e8a58878cb44e" kindref="member">rpc_context_register_instance</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_instance_t<sp/>instance);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1ae6d86450498479f51012a50bd973e273" kindref="member">rpc_context_unregister_instance</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>path);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1afdc2720f56729686fea39d6bb498da37" kindref="member">rpc_context_register_member</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref><sp/>*_Nonnull<sp/>m);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1ac0a7c2d5e6bb7464de61d346f97c0b04" kindref="member">rpc_context_register_block</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>arg,<sp/>_Nonnull<sp/><ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref><sp/>func);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a1aac077f97529f7c26834c139fefc2f5" kindref="member">rpc_context_register_func</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>arg,<sp/>_Nonnull<sp/><ref refid="service_8h_1add2d357ed7db564684628b3467048431" kindref="member">rpc_function_f</ref><sp/>func);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a7ad6475e7ca46534421ce0c3245d0cb2" kindref="member">rpc_context_unregister_member</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a5eb243586ec426274b93ad40f64f0ea5" kindref="member">rpc_context_set_pre_call_hook</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/><ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref><sp/>fn);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a6b62e56dbc71d17c4094d2cfec863712" kindref="member">rpc_context_set_post_call_hook</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/><ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref><sp/>fn);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">_Nullable<sp/><ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref><sp/><ref refid="service_8h_1adf89ac4a7b3a1e436b03a482eb366639" kindref="member">rpc_context_dispatch_call</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,<sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a1665198f8dc86a0775adef55c01d843e" kindref="member">rpc_context_emit_event</ref>(_Nonnull<sp/>rpc_context_t<sp/>context,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,<sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/><ref refid="service_8h_1ad820e18677b7171a41b0f0135600bbc4" kindref="member">rpc_function_get_arg</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">_Nonnull<sp/>rpc_context_t<sp/><ref refid="service_8h_1aea3d4b8ab491b9ab4451ea8851f6e9ec" kindref="member">rpc_function_get_context</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">_Nonnull<sp/>rpc_instance_t<sp/><ref refid="service_8h_1ad148128984ab4c5bab8ff124c6796344" kindref="member">rpc_function_get_instance</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/><ref refid="service_8h_1afa036dc361d52333f0360b556ddf28f8" kindref="member">rpc_function_get_name</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/><ref refid="service_8h_1a023e49d1050b5d175dd0ab8a5da03a4c" kindref="member">rpc_function_get_path</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/><ref refid="service_8h_1a87cbfb7e78c20de95c11ebd17b041c2a" kindref="member">rpc_function_get_interface</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a1c8603d576553224db42579cb9180d8d" kindref="member">rpc_function_respond</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,<sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a8199576424cc9470380ab43248129911" kindref="member">rpc_function_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>message,<sp/>...);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a89abe6ee2bcc59409eaccf1955ada0ad" kindref="member">rpc_function_error_ex</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>exception);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1ac8c50ecedc9e59086e1ab63e1dd6c425" kindref="member">rpc_function_yield</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,<sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>fragment);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a5f0f3252a2c4e12050419519afe64e92" kindref="member">rpc_function_end</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a6018b6f71a3d1af7494125b8ba22f981" kindref="member">rpc_function_kill</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="service_8h_1ad0185b8a60875843d91ca00b3e8d4886" kindref="member">rpc_function_should_abort</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a4b6ceb43e090fda8928a3a46e7da614a" kindref="member">rpc_function_set_async_abort_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="service_8h_1aebbaf8e39f128b6655d23aad6a8ab634" kindref="member">rpc_abort_handler_t</ref><sp/>handler);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">_Nullable<sp/>rpc_instance_t<sp/><ref refid="service_8h_1a805d705c1a9f94cf4aa04bb71a46a928" kindref="member">rpc_instance_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>arg,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a913a58356a0366081127227d15a74cc4" kindref="member">rpc_instance_set_description</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/><ref refid="service_8h_1a661c65e4aa798fd4b63851e267f5c018" kindref="member">rpc_instance_get_arg</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/><ref refid="service_8h_1ad1901375c6ba0463bd572396682ed36f" kindref="member">rpc_instance_get_path</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1abca1b1b9d6d4a7ca012ca242e0adeafd" kindref="member">rpc_instance_register_interface</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>interface,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref><sp/>*_Nullable<sp/>vtable,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>arg);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1aab9955f657aeadeee70c6472300eb695" kindref="member">rpc_instance_unregister_interface</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>interface);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1ae0782034f1232a190e4564704d2ebf69" kindref="member">rpc_instance_register_member</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref><sp/>*_Nonnull<sp/>member);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1aef405841a8e133586cc25dc794aa07d3" kindref="member">rpc_instance_unregister_member</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1aaa36ef0229d484da716697daaccd4863" kindref="member">rpc_instance_register_block</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>arg,<sp/>_Nonnull<sp/><ref refid="service_8h_1ae49a22468cfcd4adfa558078e9e4e312" kindref="member">rpc_function_t</ref><sp/>fn);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1aa8486642b6ff64df31c25ff5cd7ed566" kindref="member">rpc_instance_register_func</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>arg,<sp/>_Nonnull<sp/><ref refid="service_8h_1add2d357ed7db564684628b3467048431" kindref="member">rpc_function_f</ref><sp/>fn);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrpc__if__member" kindref="compound">rpc_if_member</ref><sp/>*_Nullable<sp/><ref refid="service_8h_1ade5ebee7e5e8e06a3b41b667a6c2af6b" kindref="member">rpc_instance_find_member</ref>(</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_instance_t<sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a8ad4da2277db627163ebae9ddb55582c" kindref="member">rpc_instance_has_interface</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>interface);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1af01103a96f4381c370148f726faea9f5" kindref="member">rpc_instance_emit_event</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a1ff9720111598b3c51013771544970d0" kindref="member">rpc_instance_register_property</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/>arg,<sp/>_Nullable<sp/><ref refid="service_8h_1ab438f0c33f3f3876f1c9a23d62134f16" kindref="member">rpc_property_getter_t</ref><sp/>getter,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="service_8h_1aa8b38d8ab3bafe79a96edaebafe13b8d" kindref="member">rpc_property_setter_t</ref><sp/>setter);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a03541c6ffc17212e8f3e5df7b75f9988" kindref="member">rpc_instance_get_property_rights</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="service_8h_1afa7ccad8a9f76a69b893d4ed8668e40c" kindref="member">rpc_instance_register_event</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a693486a3b4444491bd4f6c75aa49f15b" kindref="member">rpc_instance_property_changed</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">_Nonnull<sp/>rpc_instance_t<sp/><ref refid="service_8h_1abec6b729eadcc1b83dd99b764db53a54" kindref="member">rpc_property_get_instance</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nullable<sp/><ref refid="service_8h_1a2829cbce768c9d60ac83d0547dc837ed" kindref="member">rpc_property_get_arg</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1af119057c34e0ac7b5ce6238d2551e3af" kindref="member">rpc_property_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="service_8h_1aecd81447bced207f9d62b7fbf55cb4c1" kindref="member">rpc_instance_free</ref>(_Nonnull<sp/>rpc_instance_t<sp/>instance);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//LIBRPC_SERVICE_H</highlight></codeline>
    </programlisting>
    <location file="/code/include/rpc/service.h"/>
  </compounddef>
</doxygen>

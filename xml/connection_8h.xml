<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="connection_8h" kind="file" language="C++">
    <compoundname>connection.h</compoundname>
    <includes local="no">Block.h</includes>
    <includes local="no">sys/time.h</includes>
    <includes refid="object_8h" local="no">rpc/object.h</includes>
    <includedby refid="client_8h" local="no">/code/include/rpc/client.h</includedby>
    <includedby refid="server_8h" local="no">/code/include/rpc/server.h</includedby>
    <includedby refid="service_8h" local="no">/code/include/rpc/service.h</includedby>
    <incdepgraph>
      <node id="108">
        <label>stdbool.h</label>
      </node>
      <node id="109">
        <label>stdarg.h</label>
      </node>
      <node id="107">
        <label>stdint.h</label>
      </node>
      <node id="103">
        <label>/code/include/rpc/connection.h</label>
        <link refid="connection.h"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>sys/types.h</label>
      </node>
      <node id="106">
        <label>rpc/object.h</label>
        <link refid="object_8h"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>sys/uio.h</label>
      </node>
      <node id="104">
        <label>Block.h</label>
      </node>
      <node id="105">
        <label>sys/time.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="113">
        <label>/code/include/rpc/client.h</label>
        <link refid="client_8h"/>
      </node>
      <node id="112">
        <label>/code/include/rpc/connection.h</label>
        <link refid="connection.h"/>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>/code/include/rpc/server.h</label>
        <link refid="server_8h"/>
      </node>
      <node id="115">
        <label>/code/include/rpc/service.h</label>
        <link refid="service_8h"/>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="connection_8h_1a4f7704822a76a6f293f6abbb59bf41f3" prot="public" static="no">
        <name>RPC_HANDLER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(const char *_path, const char *_iface, const char *_name, 	\
	    <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _args) {					\
		_fn(_arg, _path, _iface, _name, _args);			\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts function pointer to a <ref refid="connection_8h_1abd97c34e4cc24dce96eb2944a3cf5aad" kindref="member">rpc_handler_t</ref> block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="108" column="9" bodyfile="/code/include/rpc/connection.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="connection_8h_1ac6630daf34229f9dd8a754b119e4a94d" prot="public" static="no">
        <name>RPC_ERROR_HANDLER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="connection_8h_1a043170f29cb25827a88be4dab2313a91" kindref="member">rpc_error_code_t</ref> _code, <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _args) {			\
		_fn(_arg, _code, _args);				\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts function pointer to a <ref refid="connection_8h_1ad84e18a0f030d415f1ac06697fe93525" kindref="member">rpc_error_handler_t</ref> block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="117" column="9" bodyfile="/code/include/rpc/connection.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="connection_8h_1a7512dc753949d75650bbec7527f9d0a6" prot="public" static="no">
        <name>RPC_CALLBACK</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _args, <ref refid="connection_8h_1a5e44285dc90be1f6bc541504a3f6d929" kindref="member">rpc_call_status_t</ref> _status) {		\
		return ((bool)_fn(_arg, _args, _status));		\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts function pointer to a <ref refid="connection_8h_1a46a9d83415588d615d554fdc3455c969" kindref="member">rpc_callback_t</ref> block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="125" column="9" bodyfile="/code/include/rpc/connection.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccd" prot="public" static="no">
        <name>rpc_error_code</name>
        <enumvalue id="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda675a64c636ef92f53c398f7cf1e7b4f7" prot="public">
          <name>RPC_INVALID_RESPONSE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Received unreadable response </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda68a960230d093e43260efb62951a6d55" prot="public">
          <name>RPC_CONNECTION_TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Connection timed out </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccdab6000475e99b77735aac87708b4aacb0" prot="public">
          <name>RPC_CONNECTION_CLOSED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disconnect received </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda51853f66b918b83f313c330c02452c70" prot="public">
          <name>RPC_CALL_TIMEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request timed out </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda8efbac3939ec6e713c533b113ebb741d" prot="public">
          <name>RPC_SPURIOUS_RESPONSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Response to unknown request </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda27f60e17ed6dc1019e2beec97e597c9b" prot="public">
          <name>RPC_LOGOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Logged out by server </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda90324cd01756fadc8e9784079af790c1" prot="public">
          <name>RPC_OTHER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Other or unknown reason </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates possible RPC error codes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="55" column="1" bodyfile="/code/include/rpc/connection.h" bodystart="54" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="connection_8h_1a22306445a7503bab94835382d07e0410" prot="public" static="no">
        <name>rpc_call_status</name>
        <enumvalue id="connection_8h_1a22306445a7503bab94835382d07e0410a1773d93b43fed839dc871589691fdef1" prot="public">
          <name>RPC_CALL_IN_PROGRESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Call in progress </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a22306445a7503bab94835382d07e0410ab6194e76e0430da03cedbe2541889e6f" prot="public">
          <name>RPC_CALL_MORE_AVAILABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Streaming response, more data available </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a22306445a7503bab94835382d07e0410a251c1dd2588db7249fc6321f8be6988d" prot="public">
          <name>RPC_CALL_DONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Call finished, response received </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a22306445a7503bab94835382d07e0410aa86df1455d84a8c7c3b4f918cb626856" prot="public">
          <name>RPC_CALL_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Call finished, error received </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="connection_8h_1a22306445a7503bab94835382d07e0410a6c33a14b8aa6d0797cb614b890e9c741" prot="public">
          <name>RPC_CALL_ABORTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Call was aborted by the user </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates possible remote procedure call status values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="69" column="1" bodyfile="/code/include/rpc/connection.h" bodystart="68" bodyend="75"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="connection_8h_1a043170f29cb25827a88be4dab2313a91" prot="public" static="no">
        <type>enum <ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccd" kindref="member">rpc_error_code</ref></type>
        <definition>typedef enum rpc_error_code  rpc_error_code_t</definition>
        <argsstring></argsstring>
        <name>rpc_error_code_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates possible RPC error codes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="connection_8h_1a5e44285dc90be1f6bc541504a3f6d929" prot="public" static="no">
        <type>enum <ref refid="connection_8h_1a22306445a7503bab94835382d07e0410" kindref="member">rpc_call_status</ref></type>
        <definition>typedef enum rpc_call_status  rpc_call_status_t</definition>
        <argsstring></argsstring>
        <name>rpc_call_status_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates possible remote procedure call status values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="connection_8h_1a70838cb106c3464db299522c5fe2782d" prot="public" static="no">
        <type>struct rpc_connection *</type>
        <definition>typedef struct rpc_connection* rpc_connection_t</definition>
        <argsstring></argsstring>
        <name>rpc_connection_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of RPC connection pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="80" column="1" bodyfile="/code/include/rpc/connection.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="connection_8h_1aeb6f25e395cc04930537960ef6b50106" prot="public" static="no">
        <type>struct rpc_call *</type>
        <definition>typedef struct rpc_call* rpc_call_t</definition>
        <argsstring></argsstring>
        <name>rpc_call_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of RPC call pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="85" column="1" bodyfile="/code/include/rpc/connection.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="connection_8h_1abd97c34e4cc24dce96eb2944a3cf5aad" prot="public" static="no">
        <type>void(^</type>
        <definition>typedef void(^ rpc_handler_t) (const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull name, _Nonnull rpc_object_t args)</definition>
        <argsstring>)(const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull name, _Nonnull rpc_object_t args)</argsstring>
        <name>rpc_handler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of RPC event handler block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="90" column="1" bodyfile="/code/include/rpc/connection.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="connection_8h_1ad84e18a0f030d415f1ac06697fe93525" prot="public" static="no">
        <type>void(^</type>
        <definition>typedef void(^ rpc_error_handler_t) (rpc_error_code_t code, _Nullable rpc_object_t args)</definition>
        <argsstring>)(rpc_error_code_t code, _Nullable rpc_object_t args)</argsstring>
        <name>rpc_error_handler_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of RPC error handler block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="97" column="1" bodyfile="/code/include/rpc/connection.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="connection_8h_1a46a9d83415588d615d554fdc3455c969" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpc_callback_t) (_Nullable rpc_object_t args, rpc_call_status_t status)</definition>
        <argsstring>)(_Nullable rpc_object_t args, rpc_call_status_t status)</argsstring>
        <name>rpc_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of RPC callback block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="103" column="1" bodyfile="/code/include/rpc/connection.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="connection_8h_1a254ad98a921503f712a2adba41160a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
        <definition>_Nullable rpc_connection_t rpc_connection_create</definition>
        <argsstring>(void *_Nonnull cookie, _Nullable rpc_object_t params)</argsstring>
        <name>rpc_connection_create</name>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1aa63689ba3875975bc8a1fd0177c1a228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_connection_close</definition>
        <argsstring>(_Nonnull rpc_connection_t conn)</argsstring>
        <name>rpc_connection_close</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes the connection and frees all resources associated with it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to close </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1ae62dee58a622eb6e1501c8c3342a1530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_connection_subscribe_event</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull name)</argsstring>
        <name>rpc_connection_subscribe_event</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subscribes for an event.</para><para>This function can be called multiple times on a single event name - subsequent calls will not send a subscribe message to the server, but instead increment internal reference count for a subscription.</para><para>Calls to <ref refid="connection_8h_1ae62dee58a622eb6e1501c8c3342a1530" kindref="member">rpc_connection_subscribe_event()</ref> must be paired with <ref refid="connection_8h_1afb42640760f64e1c56d2e09808b04769" kindref="member">rpc_connection_unsubscribe_event()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to subscribe on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Event name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1afb42640760f64e1c56d2e09808b04769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_connection_unsubscribe_event</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nonnull interface, const char *_Nonnull name)</argsstring>
        <name>rpc_connection_unsubscribe_event</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Undoes previous event subscription.</para><para>This function may either:<itemizedlist>
<listitem><para>decrement reference count of subscription for given event</para></listitem><listitem><para>send unsubscribe message to the server (when subscription reference count reached value of 0)</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to undo the subscription on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Event name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1ab223ffd9a03ab35ac0369f4fde934c49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *_Nonnull</type>
        <definition>void* _Nonnull rpc_connection_register_event_handler</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull name, _Nullable rpc_handler_t handler)</argsstring>
        <name>rpc_connection_register_event_handler</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="connection_8h_1abd97c34e4cc24dce96eb2944a3cf5aad" kindref="member">rpc_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers an event handler block for an event of a given name.</para><para>Each time an event occurs, a handler block is going to be called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to register an event handler for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of an event to be handled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler of rpc_handler_t type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a102ad5fd1ab895a56319a25f43060a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_connection_unregister_event_handler</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, void *_Nonnull cookie)</argsstring>
        <name>rpc_connection_unregister_event_handler</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>void *_Nonnull</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cancels further execution of a given event handler block for ongoing events of a given name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to remove event handler from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Void pointer to event handler itself </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1af5e8d63da05fa221ac8bb51ff22e7f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_call_sync</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull method,...)</argsstring>
        <name>rpc_connection_call_sync</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>method</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a synchronous RPC method call using a given connection.</para><para>Function blocks until a result is ready and returns it, or cancels and returns a NULL pointer if a timeout has occurred.</para><para>Method call arguments need to be rpc_object_t instances, followed with a NULL, denoting end of variable argument list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to do a call on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of a method to be called </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Called method arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1ac23facad7f27401980fcb21762368760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_call_syncv</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull method, va_list ap)</argsstring>
        <name>rpc_connection_call_syncv</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>method</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a synchronous RPC method call using a given connection.</para><para>Function blocks until a result is ready and returns it, or cancels and returns a NULL pointer if a timeout has occurred.</para><para>Instead of variable arguments length in <ref refid="connection_8h_1ad5e74986e0e4bcd402fbc1f565a7dd3d" kindref="member">rpc_connection_call()</ref> example, this function takes previously assembled variable arguments list structure as its argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to do a call on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of a method to be called </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments list structure describing a method arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1ac0f2ec46d7379ad838a2bcf4cc6ef7a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_call_syncp</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull method, const char *_Nullable fmt,...)</argsstring>
        <name>rpc_connection_call_syncp</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a synchronous RPC method call using a given connection.</para><para>This function is similar to <ref refid="connection_8h_1af5e8d63da05fa221ac8bb51ff22e7f3b" kindref="member">rpc_connection_call_sync()</ref>, but instead of taking rpc_object_t arguments, it accepts a format string and a list of values to pack, in format used by the <ref refid="object_8h_1a8a8454f12dcde323f5daba961febea97" kindref="member">rpc_object_pack()</ref> function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to do a call on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of a method to be called </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format strin </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Called method arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a7f212d17eac02cd846041fccbd79d3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_call_syncpv</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull method, const char *_Nullable fmt, va_list ap)</argsstring>
        <name>rpc_connection_call_syncpv</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1aa1c70b3f09c29885ffee12215669562d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_call_simple</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nonnull name, const char *_Nullable fmt,...)</argsstring>
        <name>rpc_connection_call_simple</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a synchronous RPC function call using a given connection.</para><para>Function blocks until a result is ready and returns it, or cancels and returns a NULL pointer if a timeout has occurred.</para><para>This function can be only used to call pure functions (not operating on objects, that is, like <ref refid="connection_8h_1ac0f2ec46d7379ad838a2bcf4cc6ef7a9" kindref="member">rpc_connection_call_syncp()</ref> but with path and interface parameters set to NULL).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1ad5e74986e0e4bcd402fbc1f565a7dd3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
        <definition>_Nullable rpc_call_t rpc_connection_call</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull name, _Nullable rpc_object_t args, _Nullable rpc_callback_t callback)</argsstring>
        <name>rpc_connection_call</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="connection_8h_1a46a9d83415588d615d554fdc3455c969" kindref="member">rpc_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a RPC method call using a given connection.</para><para>Function returns immediately without waiting for a RPC completion and returns rpc_call_t object representing the ongoing call.</para><para>Function supports a callback argument of rpc_callback_t type, which is a pointer to a function to be called on RPC completion. Can be set to NULL when that functionality is not needed by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to do a call on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of a method to be called </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable length RPC method arguments list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function pointer to be called on RPC completion </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RPC call object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a5332b87fc6add76392bdc17d0db2e982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_get_property</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nonnull interface, const char *_Nonnull name)</argsstring>
        <name>rpc_connection_get_property</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1aacf709173844e2628bd6ada18d0497ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_set_property</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nonnull interface, const char *_Nonnull name, rpc_object_t _Nonnull value)</argsstring>
        <name>rpc_connection_set_property</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _Nonnull</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a1964b28aff2f749ab8aa8ae8fedcf9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_set_propertyp</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull name, const char *_Nonnull fmt,...)</argsstring>
        <name>rpc_connection_set_propertyp</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a933ccba1b43865b6a634524c72e7d1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_connection_set_propertypv</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nonnull interface, const char *_Nonnull name, const char *_Nonnull fmt, va_list ap)</argsstring>
        <name>rpc_connection_set_propertypv</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1abd699ca36e45ca40ff561c8243cbc99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_connection_send_event</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, const char *_Nullable path, const char *_Nullable interface, const char *_Nonnull name, _Nonnull rpc_object_t args)</argsstring>
        <name>rpc_connection_send_event</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *_Nullable</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *_Nonnull</type>
          <declname>name</declname>
        </param>
        <param>
          <type>_Nonnull <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends an event.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to send event across </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Event name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Event arguments or NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1abbce64346725655e72faa0bf1c479750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_connection_ping</definition>
        <argsstring>(_Nonnull rpc_connection_t conn)</argsstring>
        <name>rpc_connection_ping</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ping the other end of a connection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a08f27546613deb38559d3a8ced1a1104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_connection_set_event_handler</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, _Nullable rpc_handler_t handler)</argsstring>
        <name>rpc_connection_set_event_handler</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="connection_8h_1abd97c34e4cc24dce96eb2944a3cf5aad" kindref="member">rpc_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets global event handler for a connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to set event handler for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Handler block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a08ccbcafd60ed5e2ebb7cf199dc9c574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_connection_set_error_handler</definition>
        <argsstring>(_Nonnull rpc_connection_t conn, _Nullable rpc_error_handler_t handler)</argsstring>
        <name>rpc_connection_set_error_handler</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <param>
          <type>_Nullable <ref refid="connection_8h_1ad84e18a0f030d415f1ac06697fe93525" kindref="member">rpc_error_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets global error handler for a connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection to set error handler for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Error handler block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1ab74f1419e8a907d1c99dbef5358b6dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *_Nullable</type>
        <definition>const char* _Nullable rpc_connection_get_remote_address</definition>
        <argsstring>(_Nonnull rpc_connection_t conn)</argsstring>
        <name>rpc_connection_get_remote_address</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a79e22944d8fb685f6378f9e5c10464f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_connection_has_credentials</definition>
        <argsstring>(_Nonnull rpc_connection_t conn)</argsstring>
        <name>rpc_connection_has_credentials</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if a connection has associated remote credentials information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if credentials information is available, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a43855db9f044fdc830fc1370d84a4f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uid_t</type>
        <definition>uid_t rpc_connection_get_remote_uid</definition>
        <argsstring>(_Nonnull rpc_connection_t conn)</argsstring>
        <name>rpc_connection_get_remote_uid</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1adf5617e400a0a91ffefc45d19dda2531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gid_t</type>
        <definition>gid_t rpc_connection_get_remote_gid</definition>
        <argsstring>(_Nonnull rpc_connection_t conn)</argsstring>
        <name>rpc_connection_get_remote_gid</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a3e2ec927f332c312dc187b6f38c81337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pid_t</type>
        <definition>pid_t rpc_connection_get_remote_pid</definition>
        <argsstring>(_Nonnull rpc_connection_t conn)</argsstring>
        <name>rpc_connection_get_remote_pid</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a55b86b7f9f1957a23b422837e9953dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_call_wait</definition>
        <argsstring>(_Nonnull rpc_call_t call)</argsstring>
        <name>rpc_call_wait</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
          <declname>call</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Waits for a call to change status.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>Call to wait on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1aaa5cabcf5efe1e9a94e97d63c0b4a388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_call_continue</definition>
        <argsstring>(_Nonnull rpc_call_t call, bool sync)</argsstring>
        <name>rpc_call_continue</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
          <declname>call</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Requests a next chunk of a result from a call.</para><para>When sync is set to true the function waits until the call finishes and returns 1 if it has completed successfully - otherwise the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>Call to be continued </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>Synchronous continue flag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 for successfully completed RPC when sync flag was set, otherwise 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1af99ba11c3cb8f36c112d39fcafb73c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_call_abort</definition>
        <argsstring>(_Nonnull rpc_call_t call)</argsstring>
        <name>rpc_call_abort</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
          <declname>call</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Aborts a pending call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>Call to be aborted </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function status - success is being reported as 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1aadc9504fdc18875824385dea55cb7384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_call_timedwait</definition>
        <argsstring>(_Nonnull rpc_call_t call, const struct timeval *_Nonnull ts)</argsstring>
        <name>rpc_call_timedwait</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
          <declname>call</declname>
        </param>
        <param>
          <type>const struct timeval *_Nonnull</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Waits for a call to change status.</para><para>If a timeout specified by a ts argument occurs, before a call changes its status, function returns -1 value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>Call to wait on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure or timeout </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a01a0d673bf8f756e5fb5e37e6564c431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_call_success</definition>
        <argsstring>(_Nonnull rpc_call_t call)</argsstring>
        <name>rpc_call_success</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
          <declname>call</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether a call has been completed successfully.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>Call to be checked </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 when call was successfully completed, otherwise 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a2986b5ae174169a41b67855e72cfd42e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_call_status</definition>
        <argsstring>(_Nonnull rpc_call_t call)</argsstring>
        <name>rpc_call_status</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
          <declname>call</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a current status of a given call as an integer value castable to rpc_call_status_t.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>Call to be checked </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Call status </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1a0e64ae2b6592deff82999556318858dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Nullable <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>_Nullable rpc_object_t rpc_call_result</definition>
        <argsstring>(_Nonnull rpc_call_t call)</argsstring>
        <name>rpc_call_result</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
          <declname>call</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a call result (or a current fragment).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>Call to get result from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="connection_8h_1aeba8ba3e9dc7e1310568709cbcae22da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_call_free</definition>
        <argsstring>(_Nonnull rpc_call_t call)</argsstring>
        <name>rpc_call_free</name>
        <param>
          <type>_Nonnull <ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref></type>
          <declname>call</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees a rpc_call_t object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>call</parametername>
</parameternamelist>
<parameterdescription>
<para>Call to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/connection.h" line="522" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>RPC connection API. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2015-2017<sp/>Two<sp/>Pore<sp/>Guys,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>providing<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBRPC_CONNECTION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRPC_CONNECTION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Block.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="object_8h" kindref="compound">rpc/object.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBDISPATCH_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dispatch/dispatch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_connection;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_call;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccd" kindref="member">rpc_error_code</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56" refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda675a64c636ef92f53c398f7cf1e7b4f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda675a64c636ef92f53c398f7cf1e7b4f7" kindref="member">RPC_INVALID_RESPONSE</ref><sp/>=<sp/>1,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda68a960230d093e43260efb62951a6d55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda68a960230d093e43260efb62951a6d55" kindref="member">RPC_CONNECTION_TIMEOUT</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58" refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccdab6000475e99b77735aac87708b4aacb0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccdab6000475e99b77735aac87708b4aacb0" kindref="member">RPC_CONNECTION_CLOSED</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda51853f66b918b83f313c330c02452c70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda51853f66b918b83f313c330c02452c70" kindref="member">RPC_CALL_TIMEOUT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60" refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda8efbac3939ec6e713c533b113ebb741d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda8efbac3939ec6e713c533b113ebb741d" kindref="member">RPC_SPURIOUS_RESPONSE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda27f60e17ed6dc1019e2beec97e597c9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda27f60e17ed6dc1019e2beec97e597c9b" kindref="member">RPC_LOGOUT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda90324cd01756fadc8e9784079af790c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a88bd06a910a4ce0b9046b9beb4af5ccda90324cd01756fadc8e9784079af790c1" kindref="member">RPC_OTHER</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><ref refid="connection_8h_1a043170f29cb25827a88be4dab2313a91" kindref="member">rpc_error_code_t</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="connection_8h_1a22306445a7503bab94835382d07e0410" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a22306445a7503bab94835382d07e0410" kindref="member">rpc_call_status</ref></highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70" refid="connection_8h_1a22306445a7503bab94835382d07e0410a1773d93b43fed839dc871589691fdef1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a22306445a7503bab94835382d07e0410a1773d93b43fed839dc871589691fdef1" kindref="member">RPC_CALL_IN_PROGRESS</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="connection_8h_1a22306445a7503bab94835382d07e0410ab6194e76e0430da03cedbe2541889e6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a22306445a7503bab94835382d07e0410ab6194e76e0430da03cedbe2541889e6f" kindref="member">RPC_CALL_MORE_AVAILABLE</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="connection_8h_1a22306445a7503bab94835382d07e0410a251c1dd2588db7249fc6321f8be6988d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a22306445a7503bab94835382d07e0410a251c1dd2588db7249fc6321f8be6988d" kindref="member">RPC_CALL_DONE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="connection_8h_1a22306445a7503bab94835382d07e0410aa86df1455d84a8c7c3b4f918cb626856" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a22306445a7503bab94835382d07e0410aa86df1455d84a8c7c3b4f918cb626856" kindref="member">RPC_CALL_ERROR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="connection_8h_1a22306445a7503bab94835382d07e0410a6c33a14b8aa6d0797cb614b890e9c741" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="connection_8h_1a22306445a7503bab94835382d07e0410a6c33a14b8aa6d0797cb614b890e9c741" kindref="member">RPC_CALL_ABORTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><ref refid="connection_8h_1a5e44285dc90be1f6bc541504a3f6d929" kindref="member">rpc_call_status_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_connection<sp/>*<ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_call<sp/>*<ref refid="connection_8h_1aeb6f25e395cc04930537960ef6b50106" kindref="member">rpc_call_t</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="connection_8h_1abd97c34e4cc24dce96eb2944a3cf5aad" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(^<ref refid="connection_8h_1abd97c34e4cc24dce96eb2944a3cf5aad" kindref="member">rpc_handler_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="connection_8h_1ad84e18a0f030d415f1ac06697fe93525" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(^<ref refid="connection_8h_1ad84e18a0f030d415f1ac06697fe93525" kindref="member">rpc_error_handler_t</ref>)(rpc_error_code_t<sp/>code,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="connection_8h_1a46a9d83415588d615d554fdc3455c969" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^<ref refid="connection_8h_1a46a9d83415588d615d554fdc3455c969" kindref="member">rpc_callback_t</ref>)(_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args,<sp/>rpc_call_status_t<sp/>status);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="connection_8h_1a4f7704822a76a6f293f6abbb59bf41f3" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_HANDLER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(const<sp/>char<sp/>*_path,<sp/>const<sp/>char<sp/>*_iface,<sp/>const<sp/>char<sp/>*_name,<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpc_object_t<sp/>_args)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fn(_arg,<sp/>_path,<sp/>_iface,<sp/>_name,<sp/>_args);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="connection_8h_1ac6630daf34229f9dd8a754b119e4a94d" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_ERROR_HANDLER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpc_error_code_t<sp/>_code,<sp/>rpc_object_t<sp/>_args)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fn(_arg,<sp/>_code,<sp/>_args);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="connection_8h_1a7512dc753949d75650bbec7527f9d0a6" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_CALLBACK(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpc_object_t<sp/>_args,<sp/>rpc_call_status_t<sp/>_status)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_args,<sp/>_status));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">_Nullable<sp/>rpc_connection_t<sp/>rpc_connection_create(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>params);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1aa63689ba3875975bc8a1fd0177c1a228" kindref="member">rpc_connection_close</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBDISPATCH_SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rpc_connection_set_dispatch_queue(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>dispatch_queue_t<sp/>queue);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1ae62dee58a622eb6e1501c8c3342a1530" kindref="member">rpc_connection_subscribe_event</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1afb42640760f64e1c56d2e09808b04769" kindref="member">rpc_connection_unsubscribe_event</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>interface,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/><ref refid="connection_8h_1ab223ffd9a03ab35ac0369f4fde934c49" kindref="member">rpc_connection_register_event_handler</ref>(</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_connection_t<sp/>conn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="connection_8h_1abd97c34e4cc24dce96eb2944a3cf5aad" kindref="member">rpc_handler_t</ref><sp/>handler);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a102ad5fd1ab895a56319a25f43060a20" kindref="member">rpc_connection_unregister_event_handler</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>cookie);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1af5e8d63da05fa221ac8bb51ff22e7f3b" kindref="member">rpc_connection_call_sync</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>method,<sp/>...);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1ac23facad7f27401980fcb21762368760" kindref="member">rpc_connection_call_syncv</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>method,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1ac0f2ec46d7379ad838a2bcf4cc6ef7a9" kindref="member">rpc_connection_call_syncp</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>method,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1a7f212d17eac02cd846041fccbd79d3c6" kindref="member">rpc_connection_call_syncpv</ref>(</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_connection_t<sp/>conn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>method,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1aa1c70b3f09c29885ffee12215669562d" kindref="member">rpc_connection_call_simple</ref>(</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_connection_t<sp/>conn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">_Nullable<sp/>rpc_call_t<sp/><ref refid="connection_8h_1ad5e74986e0e4bcd402fbc1f565a7dd3d" kindref="member">rpc_connection_call</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,<sp/>_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="connection_8h_1a46a9d83415588d615d554fdc3455c969" kindref="member">rpc_callback_t</ref><sp/>callback);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1a5332b87fc6add76392bdc17d0db2e982" kindref="member">rpc_connection_get_property</ref>(</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_connection_t<sp/>conn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1aacf709173844e2628bd6ada18d0497ca" kindref="member">rpc_connection_set_property</ref>(</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_connection_t<sp/>conn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>_Nonnull<sp/>value);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1a1964b28aff2f749ab8aa8ae8fedcf9d5" kindref="member">rpc_connection_set_propertyp</ref>(</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_connection_t<sp/>conn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1a933ccba1b43865b6a634524c72e7d1ab" kindref="member">rpc_connection_set_propertypv</ref>(</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_connection_t<sp/>conn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1abd699ca36e45ca40ff561c8243cbc99e" kindref="member">rpc_connection_send_event</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/>interface,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nonnull<sp/>name,<sp/>_Nonnull<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1abbce64346725655e72faa0bf1c479750" kindref="member">rpc_connection_ping</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a08f27546613deb38559d3a8ced1a1104" kindref="member">rpc_connection_set_event_handler</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="connection_8h_1abd97c34e4cc24dce96eb2944a3cf5aad" kindref="member">rpc_handler_t</ref><sp/>handler);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a08ccbcafd60ed5e2ebb7cf199dc9c574" kindref="member">rpc_connection_set_error_handler</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nullable<sp/><ref refid="connection_8h_1ad84e18a0f030d415f1ac06697fe93525" kindref="member">rpc_error_handler_t</ref><sp/>handler);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_Nullable<sp/><ref refid="connection_8h_1ab74f1419e8a907d1c99dbef5358b6dd2" kindref="member">rpc_connection_get_remote_address</ref>(</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nonnull<sp/>rpc_connection_t<sp/>conn);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a79e22944d8fb685f6378f9e5c10464f3" kindref="member">rpc_connection_has_credentials</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">uid_t<sp/><ref refid="connection_8h_1a43855db9f044fdc830fc1370d84a4f4b" kindref="member">rpc_connection_get_remote_uid</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">gid_t<sp/><ref refid="connection_8h_1adf5617e400a0a91ffefc45d19dda2531" kindref="member">rpc_connection_get_remote_gid</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">pid_t<sp/><ref refid="connection_8h_1a3e2ec927f332c312dc187b6f38c81337" kindref="member">rpc_connection_get_remote_pid</ref>(_Nonnull<sp/>rpc_connection_t<sp/>conn);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a55b86b7f9f1957a23b422837e9953dab" kindref="member">rpc_call_wait</ref>(_Nonnull<sp/>rpc_call_t<sp/>call);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1aaa5cabcf5efe1e9a94e97d63c0b4a388" kindref="member">rpc_call_continue</ref>(_Nonnull<sp/>rpc_call_t<sp/>call,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sync);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1af99ba11c3cb8f36c112d39fcafb73c50" kindref="member">rpc_call_abort</ref>(_Nonnull<sp/>rpc_call_t<sp/>call);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1aadc9504fdc18875824385dea55cb7384" kindref="member">rpc_call_timedwait</ref>(_Nonnull<sp/>rpc_call_t<sp/>call,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timeval<sp/>*_Nonnull<sp/>ts);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a01a0d673bf8f756e5fb5e37e6564c431" kindref="member">rpc_call_success</ref>(_Nonnull<sp/>rpc_call_t<sp/>call);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1a22306445a7503bab94835382d07e0410" kindref="member">rpc_call_status</ref>(_Nonnull<sp/>rpc_call_t<sp/>call);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">_Nullable<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="connection_8h_1a0e64ae2b6592deff82999556318858dd" kindref="member">rpc_call_result</ref>(_Nonnull<sp/>rpc_call_t<sp/>call);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="connection_8h_1aeba8ba3e9dc7e1310568709cbcae22da" kindref="member">rpc_call_free</ref>(_Nonnull<sp/>rpc_call_t<sp/>call);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//LIBRPC_CONNECTION_H</highlight></codeline>
    </programlisting>
    <location file="/code/include/rpc/connection.h"/>
  </compounddef>
</doxygen>

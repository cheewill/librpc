<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="typing_8h" kind="file" language="C++">
    <compoundname>typing.h</compoundname>
    <includes refid="object_8h" local="no">rpc/object.h</includes>
    <incdepgraph>
      <node id="173">
        <label>stdbool.h</label>
      </node>
      <node id="174">
        <label>stdarg.h</label>
      </node>
      <node id="172">
        <label>stdint.h</label>
      </node>
      <node id="170">
        <label>/code/include/rpc/typing.h</label>
        <link refid="typing.h"/>
        <childnode refid="171" relation="include">
        </childnode>
      </node>
      <node id="176">
        <label>sys/types.h</label>
      </node>
      <node id="171">
        <label>rpc/object.h</label>
        <link refid="object_8h"/>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
      <node id="175">
        <label>sys/uio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="typing_8h_1aa8222d58f186295461f3dfb1beb256b9" prot="public" static="no">
        <name>RPCT_REALM_FIELD</name>
        <initializer>&quot;%realm&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="36" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1af639f24835da7f0384e5bb0650bb52a6" prot="public" static="no">
        <name>RPCT_TYPE_FIELD</name>
        <initializer>&quot;%type&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="37" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1a301ed423ac251ab4f8468e471f011666" prot="public" static="no">
        <name>RPCT_VALUE_FIELD</name>
        <initializer>&quot;%value&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="38" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1ac7b83a7da323b0a26398b76f023b814a" prot="public" static="no">
        <name>RPCT_TYPE_APPLIER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref> _type) {						\
		return ((bool)_fn(_arg, _type));			\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="117" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1a19cc98526407a16d32dcc0dd3c12188a" prot="public" static="no">
        <name>RPCT_MEMBER_APPLIER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref> _member) {					\
		return ((bool)_fn(_arg, _member));			\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="122" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" prot="public" static="no">
        <name>rpct_class_t</name>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba33dacc81d914d023657f0483f02504e1" prot="public">
          <name>RPC_TYPING_STRUCT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A structure </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba9ad5bd76922635a0b8568576d88e7515" prot="public">
          <name>RPC_TYPING_UNION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A union </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba52881f53baa4539863c4100a0e7151c0" prot="public">
          <name>RPC_TYPING_ENUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An enum </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261baa090dc151eff727a5576057f42816a48" prot="public">
          <name>RPC_TYPING_TYPEDEF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A type alias </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba5112c6c026c6d744be5a9fbe0ebaa71d" prot="public">
          <name>RPC_TYPING_BUILTIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A builtin type </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A type class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="105" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="105" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" prot="public" static="no">
        <type>struct rpct_type *</type>
        <definition>typedef struct rpct_type* rpct_type_t</definition>
        <argsstring></argsstring>
        <name>rpct_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a type, as defined in the interface definition file.</para><para>rpct_type_t represents a defined type, that is - an unspecialized type. Unspecialized means that if a type has any generic variables (eg. Type&lt;A, B&gt;), A and B are type placeholders.</para><para>Examples of unspecialized types:<itemizedlist>
<listitem><para>string</para></listitem><listitem><para>NonGenericStructOne</para></listitem><listitem><para>GenericStructTwo&lt;T&gt;</para></listitem><listitem><para>GenericTypedef&lt;V&gt;</para></listitem><listitem><para>HashMap&lt;K, V&gt; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="60" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a0d718518624626887a65ead4f5cde3b9" prot="public" static="no">
        <type>struct rpct_typei *</type>
        <definition>typedef struct rpct_typei* rpct_typei_t</definition>
        <argsstring></argsstring>
        <name>rpct_typei_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a specialized type.</para><para>rpct_typei_t represents a specialized type, that is - a possibly generic type with its generic variables specialized with actual types.</para><para>One special case here is a partially specialized type. A partially specialized type may be present as a structure member, union branch or typedef body. &quot;partially&quot; means that some of the type variables might be specialized, but some others might not.</para><para>Examples of specialized types:<itemizedlist>
<listitem><para>string</para></listitem><listitem><para>NonGenericStructOne</para></listitem><listitem><para>GenericStructTwo&lt;int64&gt;</para></listitem><listitem><para>GenericTypedef&lt;string&gt;</para></listitem><listitem><para>HashMap&lt;string, double&gt;</para></listitem></itemizedlist>
</para><para>Examples of partially specialized types:<itemizedlist>
<listitem><para>GenericStructTwo&lt;T&gt;</para></listitem><listitem><para>HashMap&lt;K, V&gt;</para></listitem><listitem><para>HashMap&lt;K, double&gt; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="85" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" prot="public" static="no">
        <type>struct rpct_member *</type>
        <definition>typedef struct rpct_member* rpct_member_t</definition>
        <argsstring></argsstring>
        <name>rpct_member_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a structure member or a union branch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="90" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" prot="public" static="no">
        <type>struct rpct_function *</type>
        <definition>typedef struct rpct_function* rpct_function_t</definition>
        <argsstring></argsstring>
        <name>rpct_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="95" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a182f9a414fde2db9be9f83a78310f628" prot="public" static="no">
        <type>struct rpct_argument *</type>
        <definition>typedef struct rpct_argument* rpct_argument_t</definition>
        <argsstring></argsstring>
        <name>rpct_argument_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a function argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="100" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a6babf38d00cc719a3531ee959b1e5478" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpct_type_applier_t) (rpct_type_t)</definition>
        <argsstring>)(rpct_type_t)</argsstring>
        <name>rpct_type_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="113" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a1b34b1728df4e41085d0ec7ecf5e8b7d" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpct_member_applier_t) (rpct_member_t)</definition>
        <argsstring>)(rpct_member_t)</argsstring>
        <name>rpct_member_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="114" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1aa6b26e723a0d03145ce069d856c431d1" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpct_function_applier_t) (rpct_function_t)</definition>
        <argsstring>)(rpct_function_t)</argsstring>
        <name>rpct_function_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="115" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="typing_8h_1a2b9f8ae8a387369f22146612228f1d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_init</definition>
        <argsstring>(void)</argsstring>
        <name>rpct_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes RPC type system</para><para><simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a6dabfe4b5d8fbc841f0af797716c7b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpct_free</definition>
        <argsstring>(void)</argsstring>
        <name>rpct_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a614a4cc99f03ed23893a73d097f26bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_load_types</definition>
        <argsstring>(const char *path)</argsstring>
        <name>rpct_load_types</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads type information from an interface definition file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the IDL file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1acbc6974bab6dc69be04a901688cfcbca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_load_types_stream</definition>
        <argsstring>(int fd)</argsstring>
        <name>rpct_load_types_stream</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads type information from an interface definition stream.</para><para>File descriptor is closed once all definitions have been read from it or error happened.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>IDL stream file descriptor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a11c7b1d7e22ac92cc8ec164c2c1c0a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_get_realm</definition>
        <argsstring>(void)</argsstring>
        <name>rpct_get_realm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current realm name.</para><para><simplesect kind="return"><para>Realm name or NULL if not set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1adc77741fd4c89f3d4801a15418da725d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_set_realm</definition>
        <argsstring>(const char *realm)</argsstring>
        <name>rpct_set_realm</name>
        <param>
          <type>const char *</type>
          <declname>realm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the current realm name.</para><para>Returns -1 and sets errno to ENOENT if given realm cannot be found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>realm</parametername>
</parameternamelist>
<parameterdescription>
<para>Realm name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae54e088b78c7f0166d91fb95faf170d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_name</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_name</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a37f302e0540ea46664540363a0333bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_realm</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_realm</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the name of the realm type belongs to.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Realm name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5317f289ac4dddca65130a597066ceeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_module</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_module</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the module name type belongs to.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Module name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ac68512976cb132b1bb0e9618a5811ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_description</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_description</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type description, as read from interface definition file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Description string (or empty string if not defined) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a66dbd15a253e476bced659e8eea238ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
        <definition>rpct_type_t rpct_type_get_parent</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_parent</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type &quot;parent&quot; in the inheritance chain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Base type or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad634c7c71e9da96f4375f2a6cbe5e1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" kindref="member">rpct_class_t</ref></type>
        <definition>rpct_class_t rpct_type_get_class</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_class</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type class.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type class </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1aad7b89cb10f1a0272e8fddfb08455302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_type_get_definition</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_definition</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type definition (underlying type).</para><para>This function returns the underlying type definition of a typedef. Returns NULL for other type classes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type definition handle or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a6cee375ae342968abcbc33f0c66ca312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_type_get_generic_vars_count</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_generic_vars_count</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a number of generic variables a type defines.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of generic variables (0 for non-generic types) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae5e41b9bdc0542b3b2ceeaea9616fcc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_generic_var</definition>
        <argsstring>(rpct_type_t type, int index)</argsstring>
        <name>rpct_type_get_generic_var</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns name of n-th generic variable.</para><para>Returns NULL if index is out of the bounds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Generic variable index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Generic variable name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5b69519413246783b273583cfb3d09d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
        <definition>rpct_member_t rpct_type_get_member</definition>
        <argsstring>(rpct_type_t type, const char *name)</argsstring>
        <name>rpct_type_get_member</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Looks up type member by name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Member handle or NULL if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a6f327621ae6dbc69d3812723c53f3feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
        <definition>rpct_type_t rpct_typei_get_type</definition>
        <argsstring>(rpct_typei_t typei)</argsstring>
        <name>rpct_typei_get_type</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a940e59facf355b4f4195d9a23647c75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_typei_get_generic_var</definition>
        <argsstring>(rpct_typei_t typei, const char *name)</argsstring>
        <name>rpct_typei_get_generic_var</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1afbb30599739b51d96d00454e0512eef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_typei_get_canonical_form</definition>
        <argsstring>(rpct_typei_t typei)</argsstring>
        <name>rpct_typei_get_canonical_form</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type declaration string (&quot;canonical form&quot;).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Canonical type declaration string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad197e18cc381248bd28c52d8854ea8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_typei_get_member_type</definition>
        <argsstring>(rpct_typei_t typei, rpct_member_t member)</argsstring>
        <name>rpct_typei_get_member_type</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a556bc81ded7514d653442d3b5fc59235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_member_get_name</definition>
        <argsstring>(rpct_member_t member)</argsstring>
        <name>rpct_member_get_name</name>
        <param>
          <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the name of a member.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Member name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5175bf9357d574e1002294ed68cc5a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_member_get_description</definition>
        <argsstring>(rpct_member_t member)</argsstring>
        <name>rpct_member_get_description</name>
        <param>
          <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the description of a member.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Description text or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a4c4b5849fe131a6c22fed1984d5e0ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_member_get_typei</definition>
        <argsstring>(rpct_member_t member)</argsstring>
        <name>rpct_member_get_typei</name>
        <param>
          <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of a member.</para><para>This functions returns NULL for enum members, because they&apos;re untyped.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle representing member type or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a2b100cc87c577459a1f20b7931993e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_function_get_name</definition>
        <argsstring>(rpct_function_t func)</argsstring>
        <name>rpct_function_get_name</name>
        <param>
          <type><ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the function name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae84de71e11b0287a7c3c9bba103fecea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_function_get_description</definition>
        <argsstring>(rpct_function_t func)</argsstring>
        <name>rpct_function_get_description</name>
        <param>
          <type><ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the function description text.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Function description or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a701dc8f154c4ab25185d05e00379ac26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_function_get_return_type</definition>
        <argsstring>(rpct_function_t func)</argsstring>
        <name>rpct_function_get_return_type</name>
        <param>
          <type><ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type instance handle representing return type of a function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return type instance handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a0fe5c9a73f38027d008d4d219c41fae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_function_get_arguments_count</definition>
        <argsstring>(rpct_function_t func)</argsstring>
        <name>rpct_function_get_arguments_count</name>
        <param>
          <type><ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns number of arguments a function takes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of arguments </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1af6d84fe41b6994acbe833b832fc69558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref></type>
        <definition>rpct_argument_t rpct_function_get_argument</definition>
        <argsstring>(rpct_function_t func, int index)</argsstring>
        <name>rpct_function_get_argument</name>
        <param>
          <type><ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns argument handle for n-th argument of a function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Argument handle or NULL if index is out of bounds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a0d547889f674d2b89dbfcc455ba1c1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_argument_get_description</definition>
        <argsstring>(rpct_argument_t arg)</argsstring>
        <name>rpct_argument_get_description</name>
        <param>
          <type><ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns description string associated with the argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Description string or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1aabf561ff1e4a57cc7e7ad974f41b06d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_argument_get_typei</definition>
        <argsstring>(rpct_argument_t arg)</argsstring>
        <name>rpct_argument_get_typei</name>
        <param>
          <type><ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a1b6d6a2e631f2eefd83ec54b5f307282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_types_apply</definition>
        <argsstring>(rpct_type_applier_t applier)</argsstring>
        <name>rpct_types_apply</name>
        <param>
          <type>rpct_type_applier_t</type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over the defined types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a6fc3d79df9153b9c6b10d929f041c3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_members_apply</definition>
        <argsstring>(rpct_type_t type, rpct_member_applier_t applier)</argsstring>
        <name>rpct_members_apply</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>rpct_member_applier_t</type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over the members of a given type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae81962b059bd8f93902da5951009c993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_functions_apply</definition>
        <argsstring>(rpct_function_applier_t applier)</argsstring>
        <name>rpct_functions_apply</name>
        <param>
          <type>rpct_function_applier_t</type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over the defined functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a607ecfa5cfa13782fafd4d8da6fbd3d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_new_typei</definition>
        <argsstring>(const char *decl)</argsstring>
        <name>rpct_new_typei</name>
        <param>
          <type>const char *</type>
          <declname>decl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new type instance from provided declaration.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type declaration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle or NULL in case of error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a2074498f206a2d2bf9cf6e751d7b87b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_new</definition>
        <argsstring>(const char *decl, const char *realm, rpc_object_t object)</argsstring>
        <name>rpct_new</name>
        <param>
          <type>const char *</type>
          <declname>decl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>realm</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1afe7e442dfe3eb86ca20e33eb39090a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_newi</definition>
        <argsstring>(rpct_typei_t typei, rpc_object_t object)</argsstring>
        <name>rpct_newi</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad561bbc3570d840153fba0ac24d53792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
        <definition>rpct_type_t rpct_get_type</definition>
        <argsstring>(const char *name)</argsstring>
        <name>rpct_get_type</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Looks up type by name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Type name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type handle or NULL if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a016851fdb0ed6e968f56c0ccd6de16d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_get_typei</definition>
        <argsstring>(rpc_object_t instance)</argsstring>
        <name>rpct_get_typei</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns type instance handle associated with an object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC object instance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad8e3d04441a3bc8f8eebdc06f3bb5acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_get_value</definition>
        <argsstring>(rpc_object_t instance)</argsstring>
        <name>rpct_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5e40e2afc72e2eb1ab1bcf77cfb36cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpct_set_value</definition>
        <argsstring>(rpc_object_t object, const char *value)</argsstring>
        <name>rpct_set_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ab69f7ee39db3ab938d331c2877815d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_serialize</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpct_serialize</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serializes object hierarchy preserving type information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae36966ca7ca5448af0bb88d173036217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_deserialize</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpct_deserialize</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserializes object hierarchy previously serialized with <ref refid="typing_8h_1ab69f7ee39db3ab938d331c2877815d80" kindref="member">rpct_serialize()</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a2f80e7ec74258ea0a5f739c61b5b623e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_validate</definition>
        <argsstring>(rpct_typei_t typei, rpc_object_t obj, rpc_object_t *errors)</argsstring>
        <name>rpct_validate</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> *</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validates object against given type instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errors</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="448" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2015-2017<sp/>Two<sp/>Pore<sp/>Guys,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>providing<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBRPC_TYPING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRPC_TYPING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="object_8h" kindref="compound">rpc/object.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor">#define<sp/>RPCT_REALM_FIELD<sp/><sp/><sp/><sp/>&quot;%realm&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_TYPE_FIELD<sp/><sp/><sp/><sp/><sp/>&quot;%type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_VALUE_FIELD<sp/><sp/><sp/><sp/>&quot;%value&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_type;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_typei;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_member;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_function;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_argument;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_type<sp/>*<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_typei<sp/>*<ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_member<sp/>*<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_function<sp/>*<ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_argument<sp/>*<ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="106" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba33dacc81d914d023657f0483f02504e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba33dacc81d914d023657f0483f02504e1" kindref="member">RPC_TYPING_STRUCT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba9ad5bd76922635a0b8568576d88e7515" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba9ad5bd76922635a0b8568576d88e7515" kindref="member">RPC_TYPING_UNION</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba52881f53baa4539863c4100a0e7151c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba52881f53baa4539863c4100a0e7151c0" kindref="member">RPC_TYPING_ENUM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261baa090dc151eff727a5576057f42816a48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261baa090dc151eff727a5576057f42816a48" kindref="member">RPC_TYPING_TYPEDEF</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba5112c6c026c6d744be5a9fbe0ebaa71d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba5112c6c026c6d744be5a9fbe0ebaa71d" kindref="member">RPC_TYPING_BUILTIN</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" kindref="member">rpct_class_t</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^rpct_type_applier_t)(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^rpct_member_applier_t)(<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^rpct_function_applier_t)(<ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_TYPE_APPLIER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpct_type_t<sp/>_type)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_type));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_MEMBER_APPLIER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpct_member_t<sp/>_member)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_member));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a2b9f8ae8a387369f22146612228f1d0a" kindref="member">rpct_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rpct_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a614a4cc99f03ed23893a73d097f26bdc" kindref="member">rpct_load_types</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1acbc6974bab6dc69be04a901688cfcbca" kindref="member">rpct_load_types_stream</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a11c7b1d7e22ac92cc8ec164c2c1c0a76" kindref="member">rpct_get_realm</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1adc77741fd4c89f3d4801a15418da725d" kindref="member">rpct_set_realm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*realm);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1ae54e088b78c7f0166d91fb95faf170d8" kindref="member">rpct_type_get_name</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a37f302e0540ea46664540363a0333bfa" kindref="member">rpct_type_get_realm</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a5317f289ac4dddca65130a597066ceeb" kindref="member">rpct_type_get_module</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1ac68512976cb132b1bb0e9618a5811ea3" kindref="member">rpct_type_get_description</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/><ref refid="typing_8h_1a66dbd15a253e476bced659e8eea238ec" kindref="member">rpct_type_get_parent</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" kindref="member">rpct_class_t</ref><sp/><ref refid="typing_8h_1ad634c7c71e9da96f4375f2a6cbe5e1fb" kindref="member">rpct_type_get_class</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/><ref refid="typing_8h_1aad7b89cb10f1a0272e8fddfb08455302" kindref="member">rpct_type_get_definition</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a6cee375ae342968abcbc33f0c66ca312" kindref="member">rpct_type_get_generic_vars_count</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1ae5e41b9bdc0542b3b2ceeaea9616fcc3" kindref="member">rpct_type_get_generic_var</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref><sp/><ref refid="typing_8h_1a5b69519413246783b273583cfb3d09d4" kindref="member">rpct_type_get_member</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/><ref refid="typing_8h_1a6f327621ae6dbc69d3812723c53f3feb" kindref="member">rpct_typei_get_type</ref>(<ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/>typei);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/><ref refid="typing_8h_1a940e59facf355b4f4195d9a23647c75f" kindref="member">rpct_typei_get_generic_var</ref>(<ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/>typei,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1afbb30599739b51d96d00454e0512eef1" kindref="member">rpct_typei_get_canonical_form</ref>(<ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/>typei);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/><ref refid="typing_8h_1ad197e18cc381248bd28c52d8854ea8ea" kindref="member">rpct_typei_get_member_type</ref>(<ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/>typei,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref><sp/>member);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a556bc81ded7514d653442d3b5fc59235" kindref="member">rpct_member_get_name</ref>(<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref><sp/>member);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a5175bf9357d574e1002294ed68cc5a12" kindref="member">rpct_member_get_description</ref>(<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref><sp/>member);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/><ref refid="typing_8h_1a4c4b5849fe131a6c22fed1984d5e0ffe" kindref="member">rpct_member_get_typei</ref>(<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref><sp/>member);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a2b100cc87c577459a1f20b7931993e9e" kindref="member">rpct_function_get_name</ref>(<ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref><sp/>func);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1ae84de71e11b0287a7c3c9bba103fecea" kindref="member">rpct_function_get_description</ref>(<ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref><sp/>func);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/><ref refid="typing_8h_1a701dc8f154c4ab25185d05e00379ac26" kindref="member">rpct_function_get_return_type</ref>(<ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref><sp/>func);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a0fe5c9a73f38027d008d4d219c41fae6" kindref="member">rpct_function_get_arguments_count</ref>(<ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref><sp/>func);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref><sp/><ref refid="typing_8h_1af6d84fe41b6994acbe833b832fc69558" kindref="member">rpct_function_get_argument</ref>(<ref refid="typing_8h_1aeb4e0d4277d29db7ff524786d2a895ba" kindref="member">rpct_function_t</ref><sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a0d547889f674d2b89dbfcc455ba1c1df" kindref="member">rpct_argument_get_description</ref>(<ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref><sp/>arg);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/><ref refid="typing_8h_1aabf561ff1e4a57cc7e7ad974f41b06d0" kindref="member">rpct_argument_get_typei</ref>(<ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref><sp/>arg);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a1b6d6a2e631f2eefd83ec54b5f307282" kindref="member">rpct_types_apply</ref>(rpct_type_applier_t<sp/>applier);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a6fc3d79df9153b9c6b10d929f041c3b0" kindref="member">rpct_members_apply</ref>(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/>type,<sp/>rpct_member_applier_t<sp/>applier);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1ae81962b059bd8f93902da5951009c993" kindref="member">rpct_functions_apply</ref>(rpct_function_applier_t<sp/>applier);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/><ref refid="typing_8h_1a607ecfa5cfa13782fafd4d8da6fbd3d8" kindref="member">rpct_new_typei</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decl);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>rpct_new(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*realm,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>rpct_newi(<ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/>typei,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref><sp/><ref refid="typing_8h_1ad561bbc3570d840153fba0ac24d53792" kindref="member">rpct_get_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/><ref refid="typing_8h_1a016851fdb0ed6e968f56c0ccd6de16d0" kindref="member">rpct_get_typei</ref>(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>instance);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>rpct_get_value(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>instance);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rpct_set_value(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1ab69f7ee39db3ab938d331c2877815d80" kindref="member">rpct_serialize</ref>(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1ae36966ca7ca5448af0bb88d173036217" kindref="member">rpct_deserialize</ref>(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a2f80e7ec74258ea0a5f739c61b5b623e" kindref="member">rpct_validate</ref>(<ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref><sp/>typei,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>obj,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>*errors);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LIBRPC_TYPING_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/code/include/rpc/typing.h"/>
  </compounddef>
</doxygen>

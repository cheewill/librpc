<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="typing_8h" kind="file" language="C++">
    <compoundname>typing.h</compoundname>
    <includes refid="object_8h" local="no">rpc/object.h</includes>
    <includedby refid="rpc_8h" local="no">/code/include/rpc/rpc.h</includedby>
    <incdepgraph>
      <node id="119">
        <label>stdbool.h</label>
      </node>
      <node id="120">
        <label>stdarg.h</label>
      </node>
      <node id="118">
        <label>stdint.h</label>
      </node>
      <node id="116">
        <label>/code/include/rpc/typing.h</label>
        <link refid="typing_8h"/>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>sys/types.h</label>
      </node>
      <node id="117">
        <label>rpc/object.h</label>
        <link refid="object_8h"/>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>sys/uio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="123">
        <label>/code/include/rpc/typing.h</label>
        <link refid="typing_8h"/>
        <childnode refid="124" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>/code/include/rpc/rpc.h</label>
        <link refid="rpc_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="typing_8h_1a9f52c34e595aa02ca85cf623c1ebe6c9" prot="public" static="no">
        <name>RPCT_TYPING_INTERFACE</name>
        <initializer>&quot;com.twoporeguys.librpc.Typing&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="40" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1af639f24835da7f0384e5bb0650bb52a6" prot="public" static="no">
        <name>RPCT_TYPE_FIELD</name>
        <initializer>&quot;%type&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="41" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1a301ed423ac251ab4f8468e471f011666" prot="public" static="no">
        <name>RPCT_VALUE_FIELD</name>
        <initializer>&quot;%value&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="42" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1ac7b83a7da323b0a26398b76f023b814a" prot="public" static="no">
        <name>RPCT_TYPE_APPLIER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref> _type) {						\
		return ((bool)_fn(_arg, _type));			\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="143" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1adc345b8b1922fea74cbbfb8e5e639f3b" prot="public" static="no">
        <name>RPCT_INTERFACE_APPLIER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" kindref="member">rpct_interface_t</ref> _iface) {					\
		return ((bool)_fn(_arg, _iface));			\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="148" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1a19cc98526407a16d32dcc0dd3c12188a" prot="public" static="no">
        <name>RPCT_MEMBER_APPLIER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref> _member) {					\
		return ((bool)_fn(_arg, _member));			\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="153" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typing_8h_1a1c0748eb4b712cb2f1f801403138834d" prot="public" static="no">
        <name>RPCT_IF_MEMBER_APPLIER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref> _if_member) {				\
		return ((bool)_fn(_arg, _if_member));			\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="158" column="9" bodyfile="/code/include/rpc/typing.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" prot="public" static="no">
        <name>rpct_class_t</name>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba33dacc81d914d023657f0483f02504e1" prot="public">
          <name>RPC_TYPING_STRUCT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A structure </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba9ad5bd76922635a0b8568576d88e7515" prot="public">
          <name>RPC_TYPING_UNION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A union </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba52881f53baa4539863c4100a0e7151c0" prot="public">
          <name>RPC_TYPING_ENUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An enum </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261baa090dc151eff727a5576057f42816a48" prot="public">
          <name>RPC_TYPING_TYPEDEF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A type alias </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba5112c6c026c6d744be5a9fbe0ebaa71d" prot="public">
          <name>RPC_TYPING_BUILTIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A builtin type </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A type class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="115" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="115" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" prot="public" static="no">
        <type>struct rpct_type *</type>
        <definition>typedef struct rpct_type* rpct_type_t</definition>
        <argsstring></argsstring>
        <name>rpct_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a type, as defined in the interface definition file.</para><para>rpct_type_t represents a defined type, that is - an unspecialized type. Unspecialized means that if a type has any generic variables (eg. Type&lt;A, B&gt;), A and B are type placeholders.</para><para>Examples of unspecialized types:<itemizedlist>
<listitem><para>string</para></listitem><listitem><para>NonGenericStructOne</para></listitem><listitem><para>GenericStructTwo&lt;T&gt;</para></listitem><listitem><para>GenericTypedef&lt;V&gt;</para></listitem><listitem><para>HashMap&lt;K, V&gt; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="65" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a0d718518624626887a65ead4f5cde3b9" prot="public" static="no">
        <type>struct rpct_typei *</type>
        <definition>typedef struct rpct_typei* rpct_typei_t</definition>
        <argsstring></argsstring>
        <name>rpct_typei_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a specialized type.</para><para>rpct_typei_t represents a specialized type, that is - a possibly generic type with its generic variables specialized with actual types.</para><para>One special case here is a partially specialized type. A partially specialized type may be present as a structure member, union branch or typedef body. &quot;partially&quot; means that some of the type variables might be specialized, but some others might not.</para><para>Examples of specialized types:<itemizedlist>
<listitem><para>string</para></listitem><listitem><para>NonGenericStructOne</para></listitem><listitem><para>GenericStructTwo&lt;int64&gt;</para></listitem><listitem><para>GenericTypedef&lt;string&gt;</para></listitem><listitem><para>HashMap&lt;string, double&gt;</para></listitem></itemizedlist>
</para><para>Examples of partially specialized types:<itemizedlist>
<listitem><para>GenericStructTwo&lt;T&gt;</para></listitem><listitem><para>HashMap&lt;K, V&gt;</para></listitem><listitem><para>HashMap&lt;K, double&gt; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="90" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" prot="public" static="no">
        <type>struct rpct_member *</type>
        <definition>typedef struct rpct_member* rpct_member_t</definition>
        <argsstring></argsstring>
        <name>rpct_member_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a structure member or a union branch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="95" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" prot="public" static="no">
        <type>struct rpct_interface *</type>
        <definition>typedef struct rpct_interface* rpct_interface_t</definition>
        <argsstring></argsstring>
        <name>rpct_interface_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents an interface. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="100" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a182f9a414fde2db9be9f83a78310f628" prot="public" static="no">
        <type>struct rpct_argument *</type>
        <definition>typedef struct rpct_argument* rpct_argument_t</definition>
        <argsstring></argsstring>
        <name>rpct_argument_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a function argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="105" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" prot="public" static="no">
        <type>struct rpct_if_member *</type>
        <definition>typedef struct rpct_if_member* rpct_if_member_t</definition>
        <argsstring></argsstring>
        <name>rpct_if_member_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents an interface member (method, property or event). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="110" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a6babf38d00cc719a3531ee959b1e5478" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpct_type_applier_t) (rpct_type_t)</definition>
        <argsstring>)(rpct_type_t)</argsstring>
        <name>rpct_type_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Block type used as a callback in <ref refid="typing_8h_1a1b6d6a2e631f2eefd83ec54b5f307282" kindref="member">rpct_types_apply</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="126" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a1b34b1728df4e41085d0ec7ecf5e8b7d" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpct_member_applier_t) (rpct_member_t)</definition>
        <argsstring>)(rpct_member_t)</argsstring>
        <name>rpct_member_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Block type used as a callback in <ref refid="typing_8h_1a6fc3d79df9153b9c6b10d929f041c3b0" kindref="member">rpct_members_apply</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="131" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1a2b565c4384ebdd8e0749b1467eec94e3" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpct_interface_applier_t) (rpct_interface_t)</definition>
        <argsstring>)(rpct_interface_t)</argsstring>
        <name>rpct_interface_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Block type used as a callback in <ref refid="typing_8h_1a3df40500a9e56d03f6310af0dc40a5a0" kindref="member">rpct_interface_apply</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="136" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typing_8h_1acc5f290ad33114a3ea5ea8f6fdcef34a" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpct_if_member_applier_t) (rpct_if_member_t)</definition>
        <argsstring>)(rpct_if_member_t)</argsstring>
        <name>rpct_if_member_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Block type used as a callback in <ref refid="typing_8h_1a1fe6427a1837bebcf1278d47b9a572f6" kindref="member">rpct_if_member_apply</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="141" column="1" bodyfile="/code/include/rpc/typing.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="typing_8h_1a2b9f8ae8a387369f22146612228f1d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_init</definition>
        <argsstring>(void)</argsstring>
        <name>rpct_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes RPC type system</para><para><simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a6dabfe4b5d8fbc841f0af797716c7b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpct_free</definition>
        <argsstring>(void)</argsstring>
        <name>rpct_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cleans up all the state associated with RPC type system. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1abd806217eb0710e56261f7165117f3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_read_file</definition>
        <argsstring>(const char *path)</argsstring>
        <name>rpct_read_file</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads IDL file without parsing it. <ref refid="typing_8h_1a614a4cc99f03ed23893a73d097f26bdc" kindref="member">rpct_load_types</ref> must be called on the same path again to load the associated types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the IDL file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a797228970122f8e212ed107266fcdf5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_read_idl</definition>
        <argsstring>(const char *name, rpc_object_t idl)</argsstring>
        <name>rpct_read_idl</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>idl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads IDL object without parsing it. <ref refid="typing_8h_1a614a4cc99f03ed23893a73d097f26bdc" kindref="member">rpct_load_types</ref> must be called on the same name again to load the associated types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the IDL blob </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idl</parametername>
</parameternamelist>
<parameterdescription>
<para>IDL blob contents </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a614a4cc99f03ed23893a73d097f26bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_load_types</definition>
        <argsstring>(const char *path)</argsstring>
        <name>rpct_load_types</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads type information from an interface definition file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the IDL file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5bfb76b7035a0d74bfb415ffcfb5596c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_load_types_dir</definition>
        <argsstring>(const char *path)</argsstring>
        <name>rpct_load_types_dir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1acbc6974bab6dc69be04a901688cfcbca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_load_types_stream</definition>
        <argsstring>(int fd)</argsstring>
        <name>rpct_load_types_stream</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads type information from an interface definition stream.</para><para>File descriptor is closed once all definitions have been read from it or error happened.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>IDL stream file descriptor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae54e088b78c7f0166d91fb95faf170d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_name</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_name</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1aa97ecafb9cd3f056287625b472d29634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_origin</definition>
        <argsstring>(rpct_type_t iface)</argsstring>
        <name>rpct_type_get_origin</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the place where type was defined.</para><para>Returned string is in form <computeroutput>file.yaml:line_number</computeroutput></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Origin string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5317f289ac4dddca65130a597066ceeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_module</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_module</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the module name type belongs to.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Module name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ac68512976cb132b1bb0e9618a5811ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_description</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_description</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type description, as read from interface definition file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Description string (or empty string if not defined) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a66dbd15a253e476bced659e8eea238ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
        <definition>rpct_type_t rpct_type_get_parent</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_parent</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type &quot;parent&quot; in the inheritance chain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Base type or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad634c7c71e9da96f4375f2a6cbe5e1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" kindref="member">rpct_class_t</ref></type>
        <definition>rpct_class_t rpct_type_get_class</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_class</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type class.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type class </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1aad7b89cb10f1a0272e8fddfb08455302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_type_get_definition</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_definition</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type definition (underlying type).</para><para>This function returns the underlying type definition of a typedef. Returns NULL for other type classes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type definition handle or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a6cee375ae342968abcbc33f0c66ca312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_type_get_generic_vars_count</definition>
        <argsstring>(rpct_type_t type)</argsstring>
        <name>rpct_type_get_generic_vars_count</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a number of generic variables a type defines.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of generic variables (0 for non-generic types) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae5e41b9bdc0542b3b2ceeaea9616fcc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_type_get_generic_var</definition>
        <argsstring>(rpct_type_t type, int index)</argsstring>
        <name>rpct_type_get_generic_var</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns name of n-th generic variable.</para><para>Returns NULL if index is out of the bounds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Generic variable index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Generic variable name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5b69519413246783b273583cfb3d09d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
        <definition>rpct_member_t rpct_type_get_member</definition>
        <argsstring>(rpct_type_t type, const char *name)</argsstring>
        <name>rpct_type_get_member</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Looks up type member by name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Member handle or NULL if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1aaccbdef57d9289cada2a56e5bc18c3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_typei_retain</definition>
        <argsstring>(rpct_typei_t typei)</argsstring>
        <name>rpct_typei_retain</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increments reference count of a type instance handle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Same as the passed argument </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a072f83e18ab9fb657649cc456b4450e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpct_typei_release</definition>
        <argsstring>(rpct_typei_t typei)</argsstring>
        <name>rpct_typei_release</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrements reference count of a type instance handle.</para><para>If the reference count reaches 0, type instance handle is freed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a6f327621ae6dbc69d3812723c53f3feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
        <definition>rpct_type_t rpct_typei_get_type</definition>
        <argsstring>(rpct_typei_t typei)</argsstring>
        <name>rpct_typei_get_type</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns base type of a type instance <computeroutput>typei</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a940e59facf355b4f4195d9a23647c75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_typei_get_generic_var</definition>
        <argsstring>(rpct_typei_t typei, const char *name)</argsstring>
        <name>rpct_typei_get_generic_var</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type instance passed as a generic variable to the <computeroutput>typei</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Generic variable name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle or <computeroutput>NULL</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1afbb30599739b51d96d00454e0512eef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_typei_get_canonical_form</definition>
        <argsstring>(rpct_typei_t typei)</argsstring>
        <name>rpct_typei_get_canonical_form</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type declaration string (&quot;canonical form&quot;).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Canonical type declaration string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad197e18cc381248bd28c52d8854ea8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_typei_get_member_type</definition>
        <argsstring>(rpct_typei_t typei, rpct_member_t member)</argsstring>
        <name>rpct_typei_get_member_type</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns type instance handler of a structure or union member.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle or NULL in case of error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a556bc81ded7514d653442d3b5fc59235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_member_get_name</definition>
        <argsstring>(rpct_member_t member)</argsstring>
        <name>rpct_member_get_name</name>
        <param>
          <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the name of a member.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Member name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5175bf9357d574e1002294ed68cc5a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_member_get_description</definition>
        <argsstring>(rpct_member_t member)</argsstring>
        <name>rpct_member_get_description</name>
        <param>
          <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the description of a member.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Description text or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a4c4b5849fe131a6c22fed1984d5e0ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_member_get_typei</definition>
        <argsstring>(rpct_member_t member)</argsstring>
        <name>rpct_member_get_typei</name>
        <param>
          <type><ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of a member.</para><para>This functions returns NULL for enum members, because they&apos;re untyped.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle representing member type or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a7cf475eca5dc433098f9c719d49d7532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_interface_get_name</definition>
        <argsstring>(rpct_interface_t iface)</argsstring>
        <name>rpct_interface_get_name</name>
        <param>
          <type><ref refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" kindref="member">rpct_interface_t</ref></type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the interface name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1aee95ee1d11ff6937048b8ad589eea438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_interface_get_origin</definition>
        <argsstring>(rpct_interface_t iface)</argsstring>
        <name>rpct_interface_get_origin</name>
        <param>
          <type><ref refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" kindref="member">rpct_interface_t</ref></type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the place where interface was defined.</para><para>Returned string is in form <computeroutput>file.yaml:line_number</computeroutput></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Origin string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a99ced7325c9c4387696c7e0fe9ea8ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_interface_get_description</definition>
        <argsstring>(rpct_interface_t iface)</argsstring>
        <name>rpct_interface_get_description</name>
        <param>
          <type><ref refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" kindref="member">rpct_interface_t</ref></type>
          <declname>iface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the interface description.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface description or <computeroutput>NULL</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a51ac1e75ff1e5d538282b9168210378f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4" kindref="member">rpc_if_member_type</ref></type>
        <definition>enum rpc_if_member_type rpct_if_member_get_type</definition>
        <argsstring>(rpct_if_member_t member)</argsstring>
        <name>rpct_if_member_get_type</name>
        <param>
          <type><ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the interface member type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface member type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a363258c9e96ec371d09ef83d5207a869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_if_member_get_name</definition>
        <argsstring>(rpct_if_member_t member)</argsstring>
        <name>rpct_if_member_get_name</name>
        <param>
          <type><ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the interface member name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface member name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a4f72b7794018735e0cb58726b6e0d9df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_if_member_get_description</definition>
        <argsstring>(rpct_if_member_t member)</argsstring>
        <name>rpct_if_member_get_description</name>
        <param>
          <type><ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref></type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the interface member description.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface member handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface member description or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ab4babf2995143eb9ccf496caa84e8351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_method_get_return_type</definition>
        <argsstring>(rpct_if_member_t method)</argsstring>
        <name>rpct_method_get_return_type</name>
        <param>
          <type><ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type instance handle representing return type of a function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return type instance handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ab5c59fa479c7421f00b8c16e0d560f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_method_get_arguments_count</definition>
        <argsstring>(rpct_if_member_t method)</argsstring>
        <name>rpct_method_get_arguments_count</name>
        <param>
          <type><ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns number of arguments a function takes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of arguments </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1af88b1f4e2fd53b2c154dc744ba594514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref></type>
        <definition>rpct_argument_t rpct_method_get_argument</definition>
        <argsstring>(rpct_if_member_t method, int index)</argsstring>
        <name>rpct_method_get_argument</name>
        <param>
          <type><ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref></type>
          <declname>method</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns argument handle for n-th argument of a function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Argument handle or NULL if index is out of bounds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1abce3ba70902e15fe331cec0b12aa3e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_property_get_type</definition>
        <argsstring>(rpct_if_member_t prop)</argsstring>
        <name>rpct_property_get_type</name>
        <param>
          <type><ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref></type>
          <declname>prop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns type instance of the property.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>Property handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle of the property </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad32d0c42cf2dee39984a9f3f1a186ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_argument_get_name</definition>
        <argsstring>(rpct_argument_t arg)</argsstring>
        <name>rpct_argument_get_name</name>
        <param>
          <type><ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns name associated with the argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Argument name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a0d547889f674d2b89dbfcc455ba1c1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpct_argument_get_description</definition>
        <argsstring>(rpct_argument_t arg)</argsstring>
        <name>rpct_argument_get_description</name>
        <param>
          <type><ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns description string associated with the argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Description string or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1aabf561ff1e4a57cc7e7ad974f41b06d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_argument_get_typei</definition>
        <argsstring>(rpct_argument_t arg)</argsstring>
        <name>rpct_argument_get_typei</name>
        <param>
          <type><ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns type instance of the argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a1b6d6a2e631f2eefd83ec54b5f307282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_types_apply</definition>
        <argsstring>(rpct_type_applier_t applier)</argsstring>
        <name>rpct_types_apply</name>
        <param>
          <type><ref refid="typing_8h_1a6babf38d00cc719a3531ee959b1e5478" kindref="member">rpct_type_applier_t</ref></type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over the defined types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if iteration was terminated, otherwise <computeroutput>false</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a6fc3d79df9153b9c6b10d929f041c3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_members_apply</definition>
        <argsstring>(rpct_type_t type, rpct_member_applier_t applier)</argsstring>
        <name>rpct_members_apply</name>
        <param>
          <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="typing_8h_1a1b34b1728df4e41085d0ec7ecf5e8b7d" kindref="member">rpct_member_applier_t</ref></type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over the members of a given type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if iteration was terminated, otherwise <computeroutput>false</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a3df40500a9e56d03f6310af0dc40a5a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_interface_apply</definition>
        <argsstring>(rpct_interface_applier_t applier)</argsstring>
        <name>rpct_interface_apply</name>
        <param>
          <type><ref refid="typing_8h_1a2b565c4384ebdd8e0749b1467eec94e3" kindref="member">rpct_interface_applier_t</ref></type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over the defined functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if iteration was terminated, otherwise <computeroutput>false</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="516" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a1fe6427a1837bebcf1278d47b9a572f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_if_member_apply</definition>
        <argsstring>(rpct_interface_t iface, rpct_if_member_applier_t applier)</argsstring>
        <name>rpct_if_member_apply</name>
        <param>
          <type><ref refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" kindref="member">rpct_interface_t</ref></type>
          <declname>iface</declname>
        </param>
        <param>
          <type><ref refid="typing_8h_1acc5f290ad33114a3ea5ea8f6fdcef34a" kindref="member">rpct_if_member_applier_t</ref></type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over members of an interface.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if iteration was terminated, otherwise <computeroutput>false</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a9bc9d4cee413b0eaf8aa5e7b7bcf95c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" kindref="member">rpct_interface_t</ref></type>
        <definition>rpct_interface_t rpct_find_interface</definition>
        <argsstring>(const char *name)</argsstring>
        <name>rpct_find_interface</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds interface <computeroutput>name</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a4abbd4b37b9c85e3199721af771de323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref></type>
        <definition>rpct_if_member_t rpct_find_if_member</definition>
        <argsstring>(const char *interface, const char *member)</argsstring>
        <name>rpct_find_if_member</name>
        <param>
          <type>const char *</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>member</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the member <computeroutput>member</computeroutput> of interface <computeroutput>interface</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>Interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interface member handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a607ecfa5cfa13782fafd4d8da6fbd3d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_new_typei</definition>
        <argsstring>(const char *decl)</argsstring>
        <name>rpct_new_typei</name>
        <param>
          <type>const char *</type>
          <declname>decl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new type instance from provided declaration.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type declaration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle or NULL in case of error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae4eb9d801add10b3fd0f4a81c0941d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_new</definition>
        <argsstring>(const char *decl, rpc_object_t object)</argsstring>
        <name>rpct_new</name>
        <param>
          <type>const char *</type>
          <declname>decl</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new object of the specified type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decl</parametername>
</parameternamelist>
<parameterdescription>
<para>Type declaration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Contents </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Typed object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1afe7e442dfe3eb86ca20e33eb39090a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_newi</definition>
        <argsstring>(rpct_typei_t typei, rpc_object_t object)</argsstring>
        <name>rpct_newi</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new object of the specified type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Contents </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Typed object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1af0334b1f79426b6a9fa41cc0e754a793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_set_typei</definition>
        <argsstring>(rpct_typei_t typei, rpc_object_t object)</argsstring>
        <name>rpct_set_typei</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binds specified type to an existing object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para>Type instance handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be typed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Typed object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad561bbc3570d840153fba0ac24d53792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref></type>
        <definition>rpct_type_t rpct_get_type</definition>
        <argsstring>(const char *name)</argsstring>
        <name>rpct_get_type</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Looks up type by name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Type name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type handle or NULL if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a016851fdb0ed6e968f56c0ccd6de16d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
        <definition>rpct_typei_t rpct_get_typei</definition>
        <argsstring>(rpc_object_t instance)</argsstring>
        <name>rpct_get_typei</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns type instance handle associated with an object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC object instance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type instance handle or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ad8e3d04441a3bc8f8eebdc06f3bb5acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_get_value</definition>
        <argsstring>(rpc_object_t instance)</argsstring>
        <name>rpct_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a5e40e2afc72e2eb1ab1bcf77cfb36cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpct_set_value</definition>
        <argsstring>(rpc_object_t object, const char *value)</argsstring>
        <name>rpct_set_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="606" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ab69f7ee39db3ab938d331c2877815d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_serialize</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpct_serialize</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serializes object hierarchy preserving type information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object with encoded type information </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="614" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae36966ca7ca5448af0bb88d173036217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_deserialize</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpct_deserialize</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserializes object hierarchy previously serialized with <ref refid="typing_8h_1ab69f7ee39db3ab938d331c2877815d80" kindref="member">rpct_serialize()</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1ae9b8420d29e1c63b07a060985c7ab55b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_validate_args</definition>
        <argsstring>(struct rpct_if_member *func, rpc_object_t args, rpc_object_t *errors)</argsstring>
        <name>rpct_validate_args</name>
        <param>
          <type>struct rpct_if_member *</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> *</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validates set of arguments for a given function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errors</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1aa5b10fa1cb8c8cc46469abebb21026a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_validate_return</definition>
        <argsstring>(struct rpct_if_member *func, rpc_object_t result, rpc_object_t *errors)</argsstring>
        <name>rpct_validate_return</name>
        <param>
          <type>struct rpct_if_member *</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>result</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> *</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validates a return value from a given function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errors</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a2f80e7ec74258ea0a5f739c61b5b623e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpct_validate</definition>
        <argsstring>(rpct_typei_t typei, rpc_object_t obj, rpc_object_t *errors)</argsstring>
        <name>rpct_validate</name>
        <param>
          <type><ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref></type>
          <declname>typei</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> *</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validates object against given type instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typei</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errors</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a07cecc265f9dd575d5ff4904f13b5fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_pre_call_hook</definition>
        <argsstring>(void *cookie, rpc_object_t args)</argsstring>
        <name>rpct_pre_call_hook</name>
        <param>
          <type>void *</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1afa62adf9fe6a415494c529254b030086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpct_post_call_hook</definition>
        <argsstring>(void *cookie, rpc_object_t args)</argsstring>
        <name>rpct_post_call_hook</name>
        <param>
          <type>void *</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="670" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a4812f96b7d0bca64c415aa3aa99182be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpct_allow_idl_download</definition>
        <argsstring>(rpc_context_t context)</argsstring>
        <name>rpct_allow_idl_download</name>
        <param>
          <type><ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref></type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>XXX</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typing_8h_1a57baca626f8a63a3812b28fad9aa838f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpct_download_idl</definition>
        <argsstring>(rpc_connection_t conn)</argsstring>
        <name>rpct_download_idl</name>
        <param>
          <type><ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref></type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>XXX</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/typing.h" line="685" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2015-2017<sp/>Two<sp/>Pore<sp/>Guys,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>providing<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBRPC_TYPING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRPC_TYPING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="object_8h" kindref="compound">rpc/object.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_TYPING_INTERFACE<sp/><sp/><sp/>&quot;com.twoporeguys.librpc.Typing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_TYPE_FIELD<sp/><sp/><sp/><sp/><sp/>&quot;%type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_VALUE_FIELD<sp/><sp/><sp/><sp/>&quot;%value&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_type;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_typei;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_member;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_interface;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_if_member;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_argument;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_type<sp/>*<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_typei<sp/>*<ref refid="typing_8h_1a0d718518624626887a65ead4f5cde3b9" kindref="member">rpct_typei_t</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_member<sp/>*<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_interface<sp/>*<ref refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" kindref="member">rpct_interface_t</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_argument<sp/>*<ref refid="typing_8h_1a182f9a414fde2db9be9f83a78310f628" kindref="member">rpct_argument_t</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpct_if_member<sp/>*<ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba33dacc81d914d023657f0483f02504e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba33dacc81d914d023657f0483f02504e1" kindref="member">RPC_TYPING_STRUCT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba9ad5bd76922635a0b8568576d88e7515" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba9ad5bd76922635a0b8568576d88e7515" kindref="member">RPC_TYPING_UNION</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba52881f53baa4539863c4100a0e7151c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba52881f53baa4539863c4100a0e7151c0" kindref="member">RPC_TYPING_ENUM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261baa090dc151eff727a5576057f42816a48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261baa090dc151eff727a5576057f42816a48" kindref="member">RPC_TYPING_TYPEDEF</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120" refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba5112c6c026c6d744be5a9fbe0ebaa71d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261ba5112c6c026c6d744be5a9fbe0ebaa71d" kindref="member">RPC_TYPING_BUILTIN</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}<sp/><ref refid="typing_8h_1a9a426085402f8ec2eeb39f876b69261b" kindref="member">rpct_class_t</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="typing_8h_1a6babf38d00cc719a3531ee959b1e5478" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^<ref refid="typing_8h_1a6babf38d00cc719a3531ee959b1e5478" kindref="member">rpct_type_applier_t</ref>)(<ref refid="typing_8h_1ab85403e2a616bb3728cd489bd0619cbb" kindref="member">rpct_type_t</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="typing_8h_1a1b34b1728df4e41085d0ec7ecf5e8b7d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^<ref refid="typing_8h_1a1b34b1728df4e41085d0ec7ecf5e8b7d" kindref="member">rpct_member_applier_t</ref>)(<ref refid="typing_8h_1a738ac0d076d329aece903bf1835bfcdd" kindref="member">rpct_member_t</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="typing_8h_1a2b565c4384ebdd8e0749b1467eec94e3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^<ref refid="typing_8h_1a2b565c4384ebdd8e0749b1467eec94e3" kindref="member">rpct_interface_applier_t</ref>)(<ref refid="typing_8h_1a38f857fb53c96e9aae9e02bd4996cc9f" kindref="member">rpct_interface_t</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="typing_8h_1acc5f290ad33114a3ea5ea8f6fdcef34a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^<ref refid="typing_8h_1acc5f290ad33114a3ea5ea8f6fdcef34a" kindref="member">rpct_if_member_applier_t</ref>)(<ref refid="typing_8h_1aa2e55bcb066527416359bc5a5dde92b3" kindref="member">rpct_if_member_t</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_TYPE_APPLIER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpct_type_t<sp/>_type)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_type));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_INTERFACE_APPLIER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpct_interface_t<sp/>_iface)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_iface));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_MEMBER_APPLIER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpct_member_t<sp/>_member)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_member));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RPCT_IF_MEMBER_APPLIER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpct_if_member_t<sp/>_if_member)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_if_member));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a2b9f8ae8a387369f22146612228f1d0a" kindref="member">rpct_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a6dabfe4b5d8fbc841f0af797716c7b64" kindref="member">rpct_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1abd806217eb0710e56261f7165117f3c9" kindref="member">rpct_read_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a797228970122f8e212ed107266fcdf5f" kindref="member">rpct_read_idl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>idl);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a614a4cc99f03ed23893a73d097f26bdc" kindref="member">rpct_load_types</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a5bfb76b7035a0d74bfb415ffcfb5596c" kindref="member">rpct_load_types_dir</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1acbc6974bab6dc69be04a901688cfcbca" kindref="member">rpct_load_types_stream</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1ae54e088b78c7f0166d91fb95faf170d8" kindref="member">rpct_type_get_name</ref>(rpct_type_t<sp/>type);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1aa97ecafb9cd3f056287625b472d29634" kindref="member">rpct_type_get_origin</ref>(rpct_type_t<sp/>iface);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a5317f289ac4dddca65130a597066ceeb" kindref="member">rpct_type_get_module</ref>(rpct_type_t<sp/>type);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1ac68512976cb132b1bb0e9618a5811ea3" kindref="member">rpct_type_get_description</ref>(rpct_type_t<sp/>type);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">rpct_type_t<sp/><ref refid="typing_8h_1a66dbd15a253e476bced659e8eea238ec" kindref="member">rpct_type_get_parent</ref>(rpct_type_t<sp/>type);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">rpct_class_t<sp/><ref refid="typing_8h_1ad634c7c71e9da96f4375f2a6cbe5e1fb" kindref="member">rpct_type_get_class</ref>(rpct_type_t<sp/>type);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1aad7b89cb10f1a0272e8fddfb08455302" kindref="member">rpct_type_get_definition</ref>(rpct_type_t<sp/>type);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a6cee375ae342968abcbc33f0c66ca312" kindref="member">rpct_type_get_generic_vars_count</ref>(rpct_type_t<sp/>type);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1ae5e41b9bdc0542b3b2ceeaea9616fcc3" kindref="member">rpct_type_get_generic_var</ref>(rpct_type_t<sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">rpct_member_t<sp/><ref refid="typing_8h_1a5b69519413246783b273583cfb3d09d4" kindref="member">rpct_type_get_member</ref>(rpct_type_t<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1aaccbdef57d9289cada2a56e5bc18c3eb" kindref="member">rpct_typei_retain</ref>(rpct_typei_t<sp/>typei);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a072f83e18ab9fb657649cc456b4450e4" kindref="member">rpct_typei_release</ref>(rpct_typei_t<sp/>typei);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">rpct_type_t<sp/><ref refid="typing_8h_1a6f327621ae6dbc69d3812723c53f3feb" kindref="member">rpct_typei_get_type</ref>(rpct_typei_t<sp/>typei);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1a940e59facf355b4f4195d9a23647c75f" kindref="member">rpct_typei_get_generic_var</ref>(rpct_typei_t<sp/>typei,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1afbb30599739b51d96d00454e0512eef1" kindref="member">rpct_typei_get_canonical_form</ref>(rpct_typei_t<sp/>typei);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1ad197e18cc381248bd28c52d8854ea8ea" kindref="member">rpct_typei_get_member_type</ref>(rpct_typei_t<sp/>typei,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>rpct_member_t<sp/>member);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a556bc81ded7514d653442d3b5fc59235" kindref="member">rpct_member_get_name</ref>(rpct_member_t<sp/>member);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a5175bf9357d574e1002294ed68cc5a12" kindref="member">rpct_member_get_description</ref>(rpct_member_t<sp/>member);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1a4c4b5849fe131a6c22fed1984d5e0ffe" kindref="member">rpct_member_get_typei</ref>(rpct_member_t<sp/>member);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a7cf475eca5dc433098f9c719d49d7532" kindref="member">rpct_interface_get_name</ref>(rpct_interface_t<sp/>iface);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1aee95ee1d11ff6937048b8ad589eea438" kindref="member">rpct_interface_get_origin</ref>(rpct_interface_t<sp/>iface);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a99ced7325c9c4387696c7e0fe9ea8ce7" kindref="member">rpct_interface_get_description</ref>(rpct_interface_t<sp/>iface);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="service_8h_1a543850b4e1fac65207114c51d9c3f1a4" kindref="member">rpc_if_member_type</ref><sp/><ref refid="typing_8h_1a51ac1e75ff1e5d538282b9168210378f" kindref="member">rpct_if_member_get_type</ref>(rpct_if_member_t<sp/>member);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a363258c9e96ec371d09ef83d5207a869" kindref="member">rpct_if_member_get_name</ref>(rpct_if_member_t<sp/>member);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a4f72b7794018735e0cb58726b6e0d9df" kindref="member">rpct_if_member_get_description</ref>(rpct_if_member_t<sp/>member);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1ab4babf2995143eb9ccf496caa84e8351" kindref="member">rpct_method_get_return_type</ref>(rpct_if_member_t<sp/>method);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1ab5c59fa479c7421f00b8c16e0d560f82" kindref="member">rpct_method_get_arguments_count</ref>(rpct_if_member_t<sp/>method);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">rpct_argument_t<sp/><ref refid="typing_8h_1af88b1f4e2fd53b2c154dc744ba594514" kindref="member">rpct_method_get_argument</ref>(rpct_if_member_t<sp/>method,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1abce3ba70902e15fe331cec0b12aa3e38" kindref="member">rpct_property_get_type</ref>(rpct_if_member_t<sp/>prop);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1ad32d0c42cf2dee39984a9f3f1a186ff7" kindref="member">rpct_argument_get_name</ref>(rpct_argument_t<sp/>arg);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="typing_8h_1a0d547889f674d2b89dbfcc455ba1c1df" kindref="member">rpct_argument_get_description</ref>(rpct_argument_t<sp/>arg);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1aabf561ff1e4a57cc7e7ad974f41b06d0" kindref="member">rpct_argument_get_typei</ref>(rpct_argument_t<sp/>arg);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a1b6d6a2e631f2eefd83ec54b5f307282" kindref="member">rpct_types_apply</ref>(<ref refid="typing_8h_1a6babf38d00cc719a3531ee959b1e5478" kindref="member">rpct_type_applier_t</ref><sp/>applier);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a6fc3d79df9153b9c6b10d929f041c3b0" kindref="member">rpct_members_apply</ref>(rpct_type_t<sp/>type,<sp/><ref refid="typing_8h_1a1b34b1728df4e41085d0ec7ecf5e8b7d" kindref="member">rpct_member_applier_t</ref><sp/>applier);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a3df40500a9e56d03f6310af0dc40a5a0" kindref="member">rpct_interface_apply</ref>(<ref refid="typing_8h_1a2b565c4384ebdd8e0749b1467eec94e3" kindref="member">rpct_interface_applier_t</ref><sp/>applier);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a1fe6427a1837bebcf1278d47b9a572f6" kindref="member">rpct_if_member_apply</ref>(rpct_interface_t<sp/>iface,<sp/><ref refid="typing_8h_1acc5f290ad33114a3ea5ea8f6fdcef34a" kindref="member">rpct_if_member_applier_t</ref><sp/>applier);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">rpct_interface_t<sp/><ref refid="typing_8h_1a9bc9d4cee413b0eaf8aa5e7b7bcf95c5" kindref="member">rpct_find_interface</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">rpct_if_member_t<sp/><ref refid="typing_8h_1a4abbd4b37b9c85e3199721af771de323" kindref="member">rpct_find_if_member</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*interface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*member);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1a607ecfa5cfa13782fafd4d8da6fbd3d8" kindref="member">rpct_new_typei</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decl);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1ae4eb9d801add10b3fd0f4a81c0941d79" kindref="member">rpct_new</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decl,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1afe7e442dfe3eb86ca20e33eb39090a32" kindref="member">rpct_newi</ref>(rpct_typei_t<sp/>typei,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1af0334b1f79426b6a9fa41cc0e754a793" kindref="member">rpct_set_typei</ref>(rpct_typei_t<sp/>typei,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">rpct_type_t<sp/><ref refid="typing_8h_1ad561bbc3570d840153fba0ac24d53792" kindref="member">rpct_get_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">rpct_typei_t<sp/><ref refid="typing_8h_1a016851fdb0ed6e968f56c0ccd6de16d0" kindref="member">rpct_get_typei</ref>(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>instance);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1ad8e3d04441a3bc8f8eebdc06f3bb5acb" kindref="member">rpct_get_value</ref>(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>instance);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a5e40e2afc72e2eb1ab1bcf77cfb36cc9" kindref="member">rpct_set_value</ref>(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1ab69f7ee39db3ab938d331c2877815d80" kindref="member">rpct_serialize</ref>(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1ae36966ca7ca5448af0bb88d173036217" kindref="member">rpct_deserialize</ref>(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1ae9b8420d29e1c63b07a060985c7ab55b" kindref="member">rpct_validate_args</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>rpct_if_member<sp/>*func,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>*errors);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1aa5b10fa1cb8c8cc46469abebb21026a0" kindref="member">rpct_validate_return</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>rpct_if_member<sp/>*func,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>result,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>*errors);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a2f80e7ec74258ea0a5f739c61b5b623e" kindref="member">rpct_validate</ref>(rpct_typei_t<sp/>typei,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>obj,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>*errors);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1a07cecc265f9dd575d5ff4904f13b5fac" kindref="member">rpct_pre_call_hook</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cookie,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/><ref refid="typing_8h_1afa62adf9fe6a415494c529254b030086" kindref="member">rpct_post_call_hook</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cookie,<sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>args);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a4812f96b7d0bca64c415aa3aa99182be" kindref="member">rpct_allow_idl_download</ref>(<ref refid="service_8h_1a55087f28cb63ff45b6c798a5dabaedd7" kindref="member">rpc_context_t</ref><sp/>context);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="typing_8h_1a57baca626f8a63a3812b28fad9aa838f" kindref="member">rpct_download_idl</ref>(<ref refid="connection_8h_1a70838cb106c3464db299522c5fe2782d" kindref="member">rpc_connection_t</ref><sp/>conn);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LIBRPC_TYPING_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/code/include/rpc/typing.h"/>
  </compounddef>
</doxygen>

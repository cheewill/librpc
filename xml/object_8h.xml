<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="object_8h" kind="file" language="C++">
    <compoundname>object.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">sys/uio.h</includes>
    <includes local="no">sys/types.h</includes>
    <includedby refid="connection_8h" local="no">/code/include/rpc/connection.h</includedby>
    <includedby refid="query_8h" local="no">/code/include/rpc/query.h</includedby>
    <includedby refid="serializer_8h" local="no">/code/include/rpc/serializer.h</includedby>
    <includedby refid="service_8h" local="no">/code/include/rpc/service.h</includedby>
    <includedby refid="typing_8h" local="no">/code/include/rpc/typing.h</includedby>
    <incdepgraph>
      <node id="118">
        <label>stdbool.h</label>
      </node>
      <node id="119">
        <label>stdarg.h</label>
      </node>
      <node id="117">
        <label>stdint.h</label>
      </node>
      <node id="121">
        <label>sys/types.h</label>
      </node>
      <node id="116">
        <label>/code/include/rpc/object.h</label>
        <link refid="object.h"/>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>sys/uio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="127">
        <label>/code/include/rpc/query.h</label>
        <link refid="query_8h"/>
      </node>
      <node id="124">
        <label>/code/include/rpc/client.h</label>
        <link refid="client_8h"/>
      </node>
      <node id="129">
        <label>/code/include/rpc/typing.h</label>
        <link refid="typing_8h"/>
      </node>
      <node id="128">
        <label>/code/include/rpc/serializer.h</label>
        <link refid="serializer_8h"/>
      </node>
      <node id="123">
        <label>/code/include/rpc/connection.h</label>
        <link refid="connection_8h"/>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>/code/include/rpc/server.h</label>
        <link refid="server_8h"/>
      </node>
      <node id="122">
        <label>/code/include/rpc/object.h</label>
        <link refid="object.h"/>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>/code/include/rpc/service.h</label>
        <link refid="service_8h"/>
        <childnode refid="125" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="object_8h_1a33c2b5ad21d20059d031e6a390021822" prot="public" static="no">
        <name>RPC_ARRAY_APPLIER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(size_t _index, <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _value) {				\
                return ((bool)_fn(_arg, _index, _value));		\
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts function pointer to an rpc_array_applier_t block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="139" column="9" bodyfile="/code/include/rpc/object.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a814f85a172b4dae9c201063cad92514e" prot="public" static="no">
        <name>RPC_DICTIONARY_APPLIER</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(const char *_key, <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _value) {			\
                return ((bool)_fn(_arg, _key, _value));			\
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts function pointer to an rpc_dictionary_applier_t block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="147" column="9" bodyfile="/code/include/rpc/object.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1af7b40854202a0a6708b0611b4fdf9121" prot="public" static="no">
        <name>RPC_ARRAY_CMP</name>
        <param><defname>_fn</defname></param>
        <param><defname>_arg</defname></param>
        <initializer>^(<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _o1, <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> _o2) {				\
                return ((int)_fn(_arg, _o1, _o2));			\
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts function pointer to an rpc_array_cmp_t block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="155" column="9" bodyfile="/code/include/rpc/object.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a470d0e93b159810ff425aec90f47c817" prot="public" static="no">
        <name>RPC_BINARY_DESTRUCTOR</name>
        <param><defname>_fn</defname></param>
        <initializer>^(void *block) {						\
		_fn(block);						\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts function poitner to an rpc_binary_destructor_t block type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="163" column="9" bodyfile="/code/include/rpc/object.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aa125ec0a73c4c9953b07e5da1712573e" prot="public" static="no">
        <name>rpc_is_error</name>
        <param><defname>_object</defname></param>
        <initializer>(<ref refid="object_8h_1a842969702ab17ad4b7e1b0c2ed9a4aef" kindref="member">rpc_get_type</ref>(_object) == <ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea7c63246a7c7bc5912d499fb117358506" kindref="member">RPC_TYPE_ERROR</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if an object is of type RPC_TYPE_ERROR.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="291" column="9" bodyfile="/code/include/rpc/object.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aac19be935f72b35eeb2851bc509eabb2" prot="public" static="no">
        <name>rpc_release</name>
        <param><defname>_object</defname></param>
        <initializer>do {								\
		if (<ref refid="object_8h_1a2d85324f75b20628a5d32e8117277e18" kindref="member">rpc_release_impl</ref>(_object) == 0)			\
			(_object) = NULL;				\
	} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrements reference count of an object.</para><para>Also sets it to NULL if as a result of the operation reference count dropped to 0 and the object was freed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to release. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="301" column="9" bodyfile="/code/include/rpc/object.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a541e997e04e48fe86df08ae323516490" prot="public" static="no">
        <name>rpc_swap</name>
        <param><defname>_old</defname></param>
        <param><defname>_new</defname></param>
        <initializer>do {								\
		<ref refid="object_8h_1aac19be935f72b35eeb2851bc509eabb2" kindref="member">rpc_release</ref>(_old);					\
		(_old) = (_new);					\
	} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="307" column="9" bodyfile="/code/include/rpc/object.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="object_8h_1a40ea3143863f0a2b47446ccaf655638e" prot="public" static="no">
        <name>rpc_type_t</name>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea71dacfbd072b09e8cbb22055447b660d" prot="public">
          <name>RPC_TYPE_NULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>null type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea318fdf911250c3ae135bb51839ff033d" prot="public">
          <name>RPC_TYPE_BOOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>boolean type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea12702811680ffcd89bee08bf546e37f6" prot="public">
          <name>RPC_TYPE_UINT64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>unsigned 64-bit integer type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea1f5294f7ab642ef8e693a2728d0ad31a" prot="public">
          <name>RPC_TYPE_INT64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>signed 64-bit integer type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea81f15a333335dc830b45d39600491796" prot="public">
          <name>RPC_TYPE_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>double precision floating-point type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea8526a0ec0f1f9f9b06dac23b1c6aecb1" prot="public">
          <name>RPC_TYPE_DATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>date type (represented as 64-bit timestamp </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea8689ddb6d2be1e10f55b946fc89c7383" prot="public">
          <name>RPC_TYPE_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>string type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea25c2db26d03cddd947fd0b9486c66858" prot="public">
          <name>RPC_TYPE_BINARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>binary data type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea7035c0eb69dd595be19d90a2e3c48ea9" prot="public">
          <name>RPC_TYPE_FD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>file descriptor type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea5dd9c67e5ca75573ddac3129e5430386" prot="public">
          <name>RPC_TYPE_DICTIONARY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>dictionary type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638eab4f0a2ba87efaf952a1008c0771d7f5a" prot="public">
          <name>RPC_TYPE_ARRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>array type </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="object_8h_1a40ea3143863f0a2b47446ccaf655638ea7c63246a7c7bc5912d499fb117358506" prot="public">
          <name>RPC_TYPE_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>error type </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerates the possible types of an rpc_object_t. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="52" column="1" bodyfile="/code/include/rpc/object.h" bodystart="52" bodyend="68"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="object_8h_1ab365f726b4975c0c8376b808d111d01b" prot="public" static="no">
        <type>struct rpc_object *</type>
        <definition>typedef struct rpc_object* rpc_object_t</definition>
        <argsstring></argsstring>
        <name>rpc_object_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of data object pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="73" column="1" bodyfile="/code/include/rpc/object.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1ac685a2916978204cdac2bc8c855f7b00" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpc_array_applier_t) (size_t index, rpc_object_t value)</definition>
        <argsstring>)(size_t index, rpc_object_t value)</argsstring>
        <name>rpc_array_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of array applier block type.</para><para>Body of block is being executed for each of the array&apos;s elements, until generator reaches end of the array, or until applier block returns false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Currently processed index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Object stored at currently processed index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Continue iteration signal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="85" column="1" bodyfile="/code/include/rpc/object.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a32c161eb6dfc8ff9efbcbc988b483b6d" prot="public" static="no">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>(^</type>
        <definition>typedef rpc_object_t(^ rpc_array_mapper_t) (size_t index, rpc_object_t value)</definition>
        <argsstring>)(size_t index, rpc_object_t value)</argsstring>
        <name>rpc_array_mapper_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="90" column="1" bodyfile="/code/include/rpc/object.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1affae185751cc133a978a305d97cd0c5a" prot="public" static="no">
        <type>bool(^</type>
        <definition>typedef bool(^ rpc_dictionary_applier_t) (const char *key, rpc_object_t value)</definition>
        <argsstring>)(const char *key, rpc_object_t value)</argsstring>
        <name>rpc_dictionary_applier_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of dictionary applier block type.</para><para>Body of block is being executed for each of the dictionary&apos;s elements, until generator reaches end of the dictionary, or until applier block returns false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Currently processed key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Object stored at currently processed key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Continue iteration signal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="103" column="1" bodyfile="/code/include/rpc/object.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1acba1dd35d6bd7ab701ce443c3c28aaf4" prot="public" static="no">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>(^</type>
        <definition>typedef rpc_object_t(^ rpc_dictionary_mapper_t) (const char *key, rpc_object_t value)</definition>
        <argsstring>)(const char *key, rpc_object_t value)</argsstring>
        <name>rpc_dictionary_mapper_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="108" column="1" bodyfile="/code/include/rpc/object.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a37160a10fb9baee827063f3db977315d" prot="public" static="no">
        <type>int(^</type>
        <definition>typedef int(^ rpc_array_cmp_t) (rpc_object_t o1, rpc_object_t o2)</definition>
        <argsstring>)(rpc_object_t o1, rpc_object_t o2)</argsstring>
        <name>rpc_array_cmp_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of array compare block type.</para><para>Body of block is being executed for pairs of array&apos;s members during sort operation.</para><para>The block should return a negative integer if the first value comes before the second, 0 if they are equal, or a positive integer if the first value comes after the second.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o1</parametername>
</parameternamelist>
<parameterdescription>
<para>A value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>o2</parametername>
</parameternamelist>
<parameterdescription>
<para>A value to compare with. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Negative value if a &lt; b; zero if a = b; positive value if a &gt; b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="125" column="1" bodyfile="/code/include/rpc/object.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a490b073d5f540379333d89d94e140b72" prot="public" static="no">
        <type>void(^</type>
        <definition>typedef void(^ rpc_binary_destructor_t) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>rpc_binary_destructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definition of binary block destructor type.</para><para>This block is called every time an rpc_object_t of type BINARY is about to be freed. It must free the data buffer associated with the object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="134" column="1" bodyfile="/code/include/rpc/object.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="object_8h_1a9f5c8073f6c079852f39f409be1f777b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_retain</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpc_retain</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increments reference count of an object.</para><para>For convenience, the function returns reference to an object passed as the first argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to increment reference count of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Same object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a2d85324f75b20628a5d32e8117277e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_release_impl</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpc_release_impl</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrements reference count of an object.</para><para>Function returns reference count of an object after operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to decrement reference count of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference count after operation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a67e5a3ceea99d8b298a5b5d5f1051fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rpc_get_line_number</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpc_get_line_number</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets line number of object location in source file (if any).</para><para>If the object was read from a file using RPC serializer API, this function might return a line number where the object was located in the source file. Otherwise, it returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to get line number from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A line number in source file or 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a7928b2f9f75a9aa9dd033b52f1036d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rpc_get_column_number</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpc_get_column_number</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets column number of object location in source file (if any).</para><para>If the object was read from a file using RPC serializer API, this function might return a column number where the object was located in the source file. Otherwise, it returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to get column number from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A column number in source file or 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aa5de9854b486016a16ac230ae0ba1d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_copy</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpc_copy</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns independent copy of an object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Copy of an provided as the function argument. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a1fd38947da5673eb2db4910878bebb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_cmp</definition>
        <argsstring>(rpc_object_t o1, rpc_object_t o2)</argsstring>
        <name>rpc_cmp</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>o1</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares objects provided as the function arguments and returns the comparison result.</para><para>The function returns negative value if object passed in first argument is smaller than the object passed in the second argument.</para><para>The function returns zero if object passed in first argument is equal to the object passed in the second argument.</para><para>The function returns positive value if object passed in first argument is greater than the object passed in the second argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o1</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>o2</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be compared. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Negative value - o1 &lt; o2, zero - o1 = o2, positive value - o1 &gt; o2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a2f5ccf4e702bdfc6ff82fcac4ce18e84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_equal</definition>
        <argsstring>(rpc_object_t o1, rpc_object_t o2)</argsstring>
        <name>rpc_equal</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>o1</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares objects provided as the function arguments and returns true if they are equivalent, otherwise returns false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o1</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>o2</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be compared. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Comparison result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ab84acb5ad97a61ccc08548a3e5d85bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rpc_hash</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpc_hash</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns numerical hash calculated from the value of an object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be hashed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical hash. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a8687bd8dcf67458dbb09549d2a9b6059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* rpc_copy_description</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpc_copy_description</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns null byte terminated human readable string representation of an object.</para><para>Caller has to take care of releasing resources held by returned value when it&apos;s not needed anymore.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be represented as a human readable string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a842969702ab17ad4b7e1b0c2ed9a4aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638e" kindref="member">rpc_type_t</ref></type>
        <definition>rpc_type_t rpc_get_type</definition>
        <argsstring>(rpc_object_t object)</argsstring>
        <name>rpc_get_type</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of an object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object&apos;s type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1af4605126ba11e2934cda5c18492d1d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpc_get_type_name</definition>
        <argsstring>(rpc_type_t type)</argsstring>
        <name>rpc_get_type_name</name>
        <param>
          <type><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638e" kindref="member">rpc_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the string name of a type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a3041a1bbc93de9f4753ed5191d6a8f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_get_last_error</definition>
        <argsstring>(void)</argsstring>
        <name>rpc_get_last_error</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns last runtime error reported by the library.</para><para><simplesect kind="return"><para>Error object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1adde6020ca4c5be010850ca4295d1a4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_object_from_json</definition>
        <argsstring>(const void *frame, size_t size)</argsstring>
        <name>rpc_object_from_json</name>
        <param>
          <type>const void *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deserialize a JSON string to an object compatible with library&apos;s data model.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON string pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON string size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Deserialized object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a583eee9f2f5292677ec130a1b6746a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_object_to_json</definition>
        <argsstring>(rpc_object_t object, void **frame, size_t *size)</argsstring>
        <name>rpc_object_to_json</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an object to a JSON string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be serialized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a serialized JSON string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of a serialized JSON string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Serialization status. Errors are reported as non-zero values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a87da19ea6b0ec7daf50ce660162e26be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_object_pack</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>rpc_object_pack</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Packs provided values accordingly to a specified format string an into object compatible with library&apos;s data model.</para><para>Each set of characters of the format string represents a single creation step of an output object and may require from 0 to n arguments. Character sets are separated with &apos;,&apos; character.</para><para>Example: [s,s,s] represents an array containing three strings and require three char * arguments to be passed to the function after the format string. Example: {i,i,i} represents a dictionary containing three integers and require three pairs of (char *, int) arguments to be passed to the function after the format string. First of each two is representing a dictionary key, which is always a char * and second an actual integer value to be packed.</para><para>The syntax above allows easy pack of dictionaries containing dynamically generated keys and continuous arrays. There is also second format string syntax, especially handy when packing dictionaries with statically known keys and noncontinuous arrays. That syntax allows specifying array indexes and name of dictionary keys directly in the format string and separating them from the value type character with &apos;:&apos; character.</para><para>Example: [0:s,1:s,20:s] represents an array containing three strings and require three char * arguments to be passed to the function after the format string. Gap between index 1 and 20 is going to be filled with NULL RPC objects. Example: {example_key:i,other_key:i,yet_another_key:i} represents a dictionary containing three integers and require three int arguments to be passed to the function after the format string.</para><para>Both syntaxes are allowed to be mixed together in a single format string creating complex data structures representations. Each explicitly specified array index is resetting an internal state of the pack function, so mixing explicit and implicit indexing syntax within a single array is going to result in a following behavior:<itemizedlist>
<listitem><para>Implicit indexing always starts from the index 0</para></listitem><listitem><para>Next implicit index is always created by incrementing an index used in previous value (either implicit or explicit).</para></listitem><listitem><para>Explicit indexing can either create a padding with NULL RPC objects within the array if the index is bigger than the current array length, or overwrite already packed values if index is smaller than the current array length.</para></listitem><listitem><para>Explicit array indexing does not have to be represented in a growing order, or any sorted order</para></listitem></itemizedlist>
</para><para>Example: {[i,s,i],[10:b,s,1:d,u],{key:v,f,u}} Array in the middle of the example below is going to be created in the following order: indexes 0-9 are going to be padded with the NULL RPC objects, index 10 is going to contain BOOL RPC object, index 11 is going to contain a STRING RPC object, function jumps back to the index 1 and replaces NULL RPC object with the DOUBLE RPC object, function increments last index, that results in the index 2 and replaces the NULL RPC object below that index with UNSIGNED INT RPC object.</para><para>Format string syntax:<itemizedlist>
<listitem><para>v - Librpc object - args: rpc_object_t object</para></listitem><listitem><para>n - Null object</para></listitem><listitem><para>b - Boolean object - args: bool value</para></listitem><listitem><para>B - Binary object - args: void *buffer, size_t size, bool copy</para></listitem><listitem><para>f - File descriptor object - args: int fd</para></listitem><listitem><para>i - Integer object - args: int value</para></listitem><listitem><para>u - Unsigned integer object - args: unsigned int value</para></listitem><listitem><para>d - Double object - args: double value</para></listitem><listitem><para>s - String object - args: char *string</para></listitem><listitem><para>{ - Open dictionary - values inside of dictionary require additional char *key argument at the beginning of their usual argument list</para></listitem><listitem><para>} - Close dictionary</para></listitem><listitem><para>[ - Open array</para></listitem><listitem><para>] - Close array</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable length list of values to be packed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Packed object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a15bdca8f36858885773a6a1f717782fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_object_vpack</definition>
        <argsstring>(const char *fmt, va_list ap)</argsstring>
        <name>rpc_object_vpack</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Packs provided values accordingly to a specified format string an into object compatible with library&apos;s data model.</para><para>The functions acts exactly the same as the rpc_object_pack function, but takes assembled variable arguments list structure as its argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments list structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Packed object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a522ca7df7ed77f09b7c4e9efea42ed83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_object_unpack</definition>
        <argsstring>(rpc_object_t, const char *fmt,...)</argsstring>
        <name>rpc_object_unpack</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpacks provided values accordingly to a specified format string from an object.</para><para>Each character set of the format string represents a single unpack step and may require from 0 to n arguments. Character sets are separated with &apos;,&apos; character.</para><para>Example: [s,s,s] represents an array containing three strings and require three char ** arguments to be passed to the function after the format string. Example: {i,i,i} represents a dictionary containing three integers and require three pairs of (char *, int *) arguments to be passed to the function after the format string. First of each two is representing a dictionary key, which is always a char * and second an actual integer value to be unpacked.</para><para>The syntax above allows easy unpack of dictionaries containing dynamically generated keys and continuous arrays. There is also second format string syntax, especially handy when unpacking dictionaries with statically known keys and noncontinuous reads from arrays. That syntax allows specifying array indexes and name of dictionary keys directly in the format string and separating them from the value type character with &apos;:&apos; character.</para><para>Example: [0:s,1:s,20:s] represents an array containing three strings and require three char ** arguments to be passed to the function after the format string. Example: {example_key:i,other_key:i,yet_another_key:i} represents a dictionary containing three integers and require three int * arguments to be passed to the function after the format string.</para><para>Both syntaxes are allowed to be mixed together in a single format string creating complex data structures representations. Each explicitly specified array index is resetting an internal state of the unpack function, so mixing explicit and implicit indexing syntax within a single array is going to result in a following behavior:<itemizedlist>
<listitem><para>Implicit indexing always starts from the index 0</para></listitem><listitem><para>Next implicit index is always created by incrementing an index used in previous value (either implicit or explicit).</para></listitem><listitem><para>Explicit array indexing does not have to be represented in a growing order, or any sorted order</para></listitem></itemizedlist>
</para><para>Example: {[i,s,i],[10:b,s,1:d,u],{key:v,f,u}}</para><para>The function returns the number of successfully processed format characters (excluding &apos;{&apos;, &apos;[&apos;, &apos;]&apos;, &apos;}&apos;), or an error as a negative value.</para><para>Format string syntax:<itemizedlist>
<listitem><para>* - Array&apos;s no-op - skip index</para></listitem><listitem><para>v - Object - args: rpc_object_t *object</para></listitem><listitem><para>b - Boolean object - args: bool *value</para></listitem><listitem><para>f - File descriptor object - args: int *fd</para></listitem><listitem><para>i - Integer object - args: int *value</para></listitem><listitem><para>u - Unsigned integer object - args: unsigned int *value</para></listitem><listitem><para>d - Double object - args: double *value</para></listitem><listitem><para>s - String object - args: char **string</para></listitem><listitem><para>R - Rest of array - returns the rest of an array into separate object - args: rpc_object_t *object</para></listitem><listitem><para>{ - Open dictionary - values inside of dictionary require additional char *key argument at the beginning of their usual argument list</para></listitem><listitem><para>} - Close dictionary</para></listitem><listitem><para>[ - Open array</para></listitem><listitem><para>] - Close array</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable length list of values to be unpacked. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of successfully unpacked objects or -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a583484fcddc086aa6eefbc6b0b86dd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_object_vunpack</definition>
        <argsstring>(rpc_object_t, const char *fmt, va_list ap)</argsstring>
        <name>rpc_object_vunpack</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpacks provided values accordingly to a specified format string from an object.</para><para>The functions acts exactly the same as the rpc_object_unpack function, but takes assembled variable arguments list structure as its argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments list structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Unpacking status. Errors are reported as negative values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a0a56b4b5320160f6cbcee59a034fa8f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_null_create</definition>
        <argsstring>(void)</argsstring>
        <name>rpc_null_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an object holding null value.</para><para><simplesect kind="return"><para>newly created object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a92cb61d1c1e25294fcbab898dff13b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_bool_create</definition>
        <argsstring>(bool value)</argsstring>
        <name>rpc_bool_create</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an rpc_object_t holding boolean value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the object (true or false). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a8b7678e59eb5f76e136fdcc3b6158c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_bool_get_value</definition>
        <argsstring>(rpc_object_t xbool)</argsstring>
        <name>rpc_bool_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xbool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a boolean value of an object.</para><para>If rpc_object_t passed as the first argument if not of RPC_TYPE_BOOL type, the function returns false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xbool</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to read the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean value of the object (true or false). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ad1ce3319d7b452bc5400518ff727a87f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_int64_create</definition>
        <argsstring>(int64_t value)</argsstring>
        <name>rpc_int64_create</name>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an object holding a signed 64-bit integer value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the object (signed 64-bit integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a4d9f3fc2fe16b2a09b1f7b5fbcf78d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t rpc_int64_get_value</definition>
        <argsstring>(rpc_object_t xint)</argsstring>
        <name>rpc_int64_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an integer value of an object.</para><para>If rpc_object_t passed as the first argument if not of RPC_TYPE_INT64 type, the function returns -1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xint</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to read the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer value of the object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a38142d7d5e24b774c7cda93734d7f643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_uint64_create</definition>
        <argsstring>(uint64_t value)</argsstring>
        <name>rpc_uint64_create</name>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding an unsigned 64-bit integer value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the object (unsigned 64-bit integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a141bf4e57cabf5a2b15ab12a1a3c587d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t rpc_uint64_get_value</definition>
        <argsstring>(rpc_object_t xuint)</argsstring>
        <name>rpc_uint64_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xuint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an integer value of an object.</para><para>If rpc_object_t passed as the first argument if not of RPC_TYPE_UINT64 type, the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xuint</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to read the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer value of the object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ad327d0505386ea397aff6a2ffc9d4e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_double_create</definition>
        <argsstring>(double value)</argsstring>
        <name>rpc_double_create</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a double value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the object (double). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a44be10360860fa14d66037e92b19c600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rpc_double_get_value</definition>
        <argsstring>(rpc_object_t xdouble)</argsstring>
        <name>rpc_double_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xdouble</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a double value of an object.</para><para>If rpc_object_t passed as the first argument if not of RPC_TYPE_DOUBLE type, the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xdouble</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to read the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Double value of the object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a56c5b9ed4b759b484d612bc3bbcd5b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_date_create</definition>
        <argsstring>(int64_t interval)</argsstring>
        <name>rpc_date_create</name>
        <param>
          <type>int64_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a date.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the object (signed 64-bit integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a3f7fe1bd56938b077470b8dc811a001a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_date_create_from_current</definition>
        <argsstring>(void)</argsstring>
        <name>rpc_date_create_from_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a date from current UTC time.</para><para><simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="612" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a1d4007edcf66361777f074b8a79e8e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t rpc_date_get_value</definition>
        <argsstring>(rpc_object_t xdate)</argsstring>
        <name>rpc_date_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xdate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an integer value of an object (UNIX timestamp).</para><para>If rpc_object_t passed as the first argument if not of RPC_TYPE_DATE type, the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xdate</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to read the value from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer UNIX timestamp value of the object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a7ea4b27c094778d16149e2aef65f25b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_data_create</definition>
        <argsstring>(const void *bytes, size_t length, rpc_binary_destructor_t destructor)</argsstring>
        <name>rpc_data_create</name>
        <param>
          <type>const void *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1a490b073d5f540379333d89d94e140b72" kindref="member">rpc_binary_destructor_t</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a binary data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer (void pointer). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Block to call once reference count drops to 0 (or NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="633" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a78262ca3dea42ec4757c1ec2a3db9eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_data_create_iov</definition>
        <argsstring>(struct iovec *iov, size_t niov)</argsstring>
        <name>rpc_data_create_iov</name>
        <param>
          <type>struct iovec *</type>
          <declname>iov</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>niov</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The same as rpc_data_create, but takes iovec list as an argument and copies it into a new continuous data buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iov</parametername>
</parameternamelist>
<parameterdescription>
<para>List of iovec to be copied. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>niov</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iovec in the iovec list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a17b4b5077bb28dad2b678e64001c6824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rpc_data_get_length</definition>
        <argsstring>(rpc_object_t xdata)</argsstring>
        <name>rpc_data_get_length</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the length of internal binary data buffer of a provided object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of an object&apos;s data buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a626c045e08849189e2d75f191ce6c903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* rpc_data_get_bytes_ptr</definition>
        <argsstring>(rpc_object_t xdata)</argsstring>
        <name>rpc_data_get_bytes_ptr</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pointer to internal binary data buffer of a provided object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to an object&apos;s data buffer (void pointer). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a0453cb25c7fbeffd9151bfd8960c1656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rpc_data_get_bytes</definition>
        <argsstring>(rpc_object_t xdata, void *buffer, size_t off, size_t length)</argsstring>
        <name>rpc_data_get_bytes</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xdata</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>off</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a copy of a slice of a internal data buffer of a provided object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>Start offset for the copy operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested size of a copy. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of a copied data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1adb3c34ac47a7c15a41758ca1de5ab356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_string_create</definition>
        <argsstring>(const char *string)</argsstring>
        <name>rpc_string_create</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the object (constant character pointer). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ae6d2218dce384ad5f90e6c3cf2c4d93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_string_create_len</definition>
        <argsstring>(const char *string, size_t length)</argsstring>
        <name>rpc_string_create_len</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a string of a specified length.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the object (constant character pointer). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of an input string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a8cbd21846d3957acd8dffe43b9b7e442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_string_create_with_format</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>rpc_string_create_with_format</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a string formatted using the regular printf function format string and arguments.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable length list of input data arguments for formatting. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a9db6feb6897323de3c3d6d6137a1a6c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_string_create_with_format_and_arguments</definition>
        <argsstring>(const char *fmt, va_list ap)</argsstring>
        <name>rpc_string_create_with_format_and_arguments</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a string formatted using the regular printf function format string and arguments (as variable arguments list type).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1abb26dd739074c3d16a9555fcd054ac0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rpc_string_get_length</definition>
        <argsstring>(rpc_object_t xstring)</argsstring>
        <name>rpc_string_get_length</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xstring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the length of internal string buffer of a provided object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xstring</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size of an object&apos;s data buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a98c3ec0132389e4a30d208894578b83c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpc_string_get_string_ptr</definition>
        <argsstring>(rpc_object_t xstring)</argsstring>
        <name>rpc_string_get_string_ptr</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xstring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pointer to internal string data buffer of a provided object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xstring</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to an object&apos;s data buffer (constant character pointer). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="726" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ab0a4b1ae9e282c596c40c41fb025fa4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_fd_create</definition>
        <argsstring>(int fd)</argsstring>
        <name>rpc_fd_create</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object holding a file descriptor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the object (signed integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a3343e6a1513fec2541dcb1027581a64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_fd_dup</definition>
        <argsstring>(rpc_object_t xfd)</argsstring>
        <name>rpc_fd_dup</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xfd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a duplicate of a file descriptor held by a provided object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xfd</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created file descriptor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aa3cfb922c202ab7b6e574a4db79143ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_fd_get_value</definition>
        <argsstring>(rpc_object_t xfd)</argsstring>
        <name>rpc_fd_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>xfd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value of a file descriptor helf by a provided object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xfd</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>File descriptor&apos;s value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="750" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a0c717b38ae14f998362fc3969ed5f54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_array_create</definition>
        <argsstring>(void)</argsstring>
        <name>rpc_array_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, empty array of objects.</para><para><simplesect kind="return"><para>Empty array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="757" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aef23f0b3d4302c2ff1e26f495137644b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_array_create_ex</definition>
        <argsstring>(const rpc_object_t *objects, size_t count, bool steal)</argsstring>
        <name>rpc_array_create_ex</name>
        <param>
          <type>const <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> *</type>
          <declname>objects</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>steal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array of objects, optionally populating it with data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>objects</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of objects to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items in objects. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>steal</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference vs. reference and increment refcount of elements in objects. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="768" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a140729688c5772adc7f345cc51448d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_value</definition>
        <argsstring>(rpc_object_t array, size_t index, rpc_object_t value)</argsstring>
        <name>rpc_array_set_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts an object to an input array at a given index and increments object&apos;s refcount.</para><para>If an index is bigger than an array itself, gap will be filled with null objects.</para><para>If an index is already occupied, then a new object takes place of an old object and the refcount of an old object is decremented.</para><para>If an object is NULL, then this function removes an old object from a given index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be inserted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index for a newly inserted value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aeb892aa166cc1e6d9834c8bb8ebbf435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_steal_value</definition>
        <argsstring>(rpc_object_t array, size_t index, rpc_object_t value)</argsstring>
        <name>rpc_array_steal_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts an object to an input array at a given index.</para><para>If an index is bigger than an array itself, gap will be filled with null objects.</para><para>If an index is already occupied, then a new object takes place of an old object and the refcount of an old object is decremented.</para><para>If an object is NULL, then this function removes an old object from a given index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be inserted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index for a newly inserted value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a4c2fe7fb304ed1ac9f1729faa8d7e501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_remove_index</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_remove_index</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes an object from a given index of a provided array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a9da12b0343c47a16a0356d5ba355a32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_append_value</definition>
        <argsstring>(rpc_object_t array, rpc_object_t value)</argsstring>
        <name>rpc_array_append_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends an object at the end of a provided array and increments object&apos;s refcount.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be appended. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a446bace2d79bfd63d985e8bf97d284ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_append_stolen_value</definition>
        <argsstring>(rpc_object_t array, rpc_object_t value)</argsstring>
        <name>rpc_array_append_stolen_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends an object at the end of a provided array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to be appended. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="831" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a4fbba33994188dff303718ac07f137fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_array_get_value</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an object held by a provided array at a given index.</para><para>If a given index does not exist, then the function returns NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of an object to be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object at a given index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="842" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ac6d963cbeefa944666692696aebc663a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rpc_array_get_count</definition>
        <argsstring>(rpc_object_t array)</argsstring>
        <name>rpc_array_get_count</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a number of elements in a provided array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of elements held by an input array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="850" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a8a6a6a91d7e5ccdadf4ae08d6aed1a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_array_apply</definition>
        <argsstring>(rpc_object_t array, rpc_array_applier_t applier)</argsstring>
        <name>rpc_array_apply</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ac685a2916978204cdac2bc8c855f7b00" kindref="member">rpc_array_applier_t</ref></type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over a given array. For each of elements executes an applier block, providing a current index and a current value an an applier block&apos;s arguments.</para><para>If an applier returns false, iteration is terminated and the function returns true (terminated). Otherwise the function iterates to the end of an input array and returns false (finished).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of code to be executed for each array element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iteration terminated (true)/finished (false) boolean flag. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="865" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ab45e3b1cd2938d9ba037ed6557071423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_map</definition>
        <argsstring>(rpc_object_t array, rpc_array_mapper_t mapper)</argsstring>
        <name>rpc_array_map</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>rpc_array_mapper_t</type>
          <declname>mapper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over a given array and replaces each element of said array with a result of mapper block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mapper</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of code to be executed for each array element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="874" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a37244ac71308e8f4e3d886727211c371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_array_contains</definition>
        <argsstring>(rpc_object_t array, rpc_object_t value)</argsstring>
        <name>rpc_array_contains</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if an entry with the same value as provided in the second argument of the function exists in a given array.</para><para>The function returns boolean result of that check.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to be searched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>RPC object representing value of a searched object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean result of the search operation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="886" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aa3abd89de4c7dc3d5d20ed624cf5f748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_array_reverse_apply</definition>
        <argsstring>(rpc_object_t array, rpc_array_applier_t applier)</argsstring>
        <name>rpc_array_reverse_apply</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ac685a2916978204cdac2bc8c855f7b00" kindref="member">rpc_array_applier_t</ref></type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over a given array in reversed order (starting from its end). Besides of that the function is acting exactly the same as rpc_array_apply.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of code to be executed for each of an array&apos;s elements. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iteration terminated (true)/finished (false) boolean flag. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="896" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aaa8222bb9416af081f44cef36b8f0161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_sort</definition>
        <argsstring>(rpc_object_t array, rpc_array_cmp_t comparator)</argsstring>
        <name>rpc_array_sort</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1a37160a10fb9baee827063f3db977315d" kindref="member">rpc_array_cmp_t</ref></type>
          <declname>comparator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts contents of a given array using provided comparator code block.</para><para>The desired behavior of the comparator block is described in rpc_array_cmp_t type&apos;s documentation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Array to be sorted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comparator</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparator to be used during sort operation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="907" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a2e6be4443b432a011f9858f005ea00cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_array_slice</definition>
        <argsstring>(rpc_object_t array, size_t start, ssize_t len)</argsstring>
        <name>rpc_array_slice</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes an input array and copies a selected number of its elements, starting from a given index, creating an output array.</para><para>If a copy size is set to -1, then an output array is being created from input array&apos;s elements from a start index to the end of an input array.</para><para>If during a copy operation, the end of an input array is reached before size requirement is satisfied, then a copy operation is terminated and the function returns an array smaller than a requested size.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Copy start index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested copy size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created array containing elements copied from an input array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="925" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a9dbe873eb749066483c87f47427baa66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_bool</definition>
        <argsstring>(rpc_object_t array, size_t index, bool value)</argsstring>
        <name>rpc_array_set_bool</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected index of an input array to a newly created RPC object holding a given boolean value.</para><para>If a selected index is larger than an input array size, then a gap between a last existing index and a requested index is filled with NULL objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (boolean). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="938" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aa6710620f1acde01dd62c467a44f18c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_int64</definition>
        <argsstring>(rpc_object_t array, size_t index, int64_t value)</argsstring>
        <name>rpc_array_set_int64</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected index of an input array to a newly created RPC object holding a given 64-bit signed integer value.</para><para>If a selected index is larger than an input array size, then a gap between a last existing index and a requested index is filled with NULL objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (64-bit signed integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="951" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a360d2e8c74227b576f95f9aa3f6e0138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_uint64</definition>
        <argsstring>(rpc_object_t array, size_t index, uint64_t value)</argsstring>
        <name>rpc_array_set_uint64</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected index of an input array to a newly created RPC object holding a given 64-bit unsigned integer value.</para><para>If a selected index is larger than an input array size, then a gap between a last existing index and a requested index is filled with NULL objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (64-bit unsigned integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="964" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ad0a9648195928da0978c15e8b8736e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_double</definition>
        <argsstring>(rpc_object_t array, size_t index, double value)</argsstring>
        <name>rpc_array_set_double</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected index of an input array to a newly created RPC object holding a given double value.</para><para>If a selected index is larger than an input array size, then a gap between a last existing index and a requested index is filled with NULL objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (double). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="977" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aaeec0f05e4409680172b54e715f2ff44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_date</definition>
        <argsstring>(rpc_object_t array, size_t index, int64_t value)</argsstring>
        <name>rpc_array_set_date</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected index of an input array to a newly created RPC object holding a given UNIX timestamp value represented as an integer.</para><para>If a selected index is larger than an input array size, then a gap between a last existing index and a requested index is filled with NULL objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (UNIX timestamp represented as an integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="990" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1adad50da5c5a3a2eaf33a85cbf5218d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_data</definition>
        <argsstring>(rpc_object_t array, size_t index, const void *bytes, size_t length)</argsstring>
        <name>rpc_array_set_data</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected index of an input array to a newly created RPC object holding a given binary data of a specified length.</para><para>If a selected index is larger than an input array size, then a gap between a last existing index and a requested index is filled with NULL objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Input binary data buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of an input data buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1004" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a18b175344695a268401293da46e40c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_string</definition>
        <argsstring>(rpc_object_t array, size_t index, const char *value)</argsstring>
        <name>rpc_array_set_string</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected index of an input array to a newly created RPC object holding a given string value.</para><para>If a selected index is larger than an input array size, then a gap between a last existing index and a requested index is filled with NULL objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string (null byte terminated constant character pointer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1018" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aab29b896749f1f7427f1addfde3125f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_array_set_fd</definition>
        <argsstring>(rpc_object_t array, size_t index, int value)</argsstring>
        <name>rpc_array_set_fd</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected index of an input array to a newly created RPC object holding a given file descriptor value.</para><para>If a selected index is larger than an input array size, then a gap between a last existing index and a requested index is filled with NULL objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input file descriptor (integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1031" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a5b743b07aa7cbad62b77e0b812e79e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_array_get_bool</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_get_bool</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_BOOL), then the function returns false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1044" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a16b71175e32e6aeed71d49dc04de69af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t rpc_array_get_int64</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_get_int64</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_INT64), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit signed integer value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1057" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ae01fab09becaf8d57b36a124e1410b09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t rpc_array_get_uint64</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_get_uint64</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_UINT64), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit unsigned integer value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1070" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ae1d0f58ae6388c7eac92906c14fdc61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rpc_array_get_double</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_get_double</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_DOUBLE), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Double value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1083" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a084b46af068b5c48dbd3e4f08a995dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t rpc_array_get_date</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_get_date</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_DATE), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer representing a UNIX timestamp. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1096" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a90cb248aeac4a38990a1b91fdc022ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* rpc_array_get_data</definition>
        <argsstring>(rpc_object_t array, size_t index, size_t *length)</argsstring>
        <name>rpc_array_get_data</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_BINARY), then the function returns NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Output value&apos;s index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of an output buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Binary output buffer pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a01e6ca99a87a802b012c9120489d5894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpc_array_get_string</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_get_string</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_STRING), then the function returns NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a96459be40290e65692aaebc15ed6b1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_array_get_fd</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_get_fd</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_FD), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>File descriptor value (integer). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a951a49f2e19cfc0296afae62af9dd72f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_array_dup_fd</definition>
        <argsstring>(rpc_object_t array, size_t index)</argsstring>
        <name>rpc_array_dup_fd</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicates a file descriptor from a given index of an input array.</para><para>If a selected index does not exist, or object being held at a given index has a type different from expected (RPC_TYPE_FD), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor&apos;s index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duplicated file descriptor (integer). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ae97f0c2a0033d6b538bd48f79c105931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_error_create</definition>
        <argsstring>(int code, const char *msg, rpc_object_t extra)</argsstring>
        <name>rpc_error_create</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object representing an error condition with automatically extracted stack trace.</para><para>It can hold data about numerical error code, string describing the actual error in human readable format and extra auxiliary data.</para><para>Extra is an optional argument and can be safely set to NULL when not needed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical error code. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing an actual error description. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra data (optional). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a3e2bba92d67fd012fb097fdb8f098df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_error_create_with_stack</definition>
        <argsstring>(int code, const char *msg, rpc_object_t extra, rpc_object_t stack)</argsstring>
        <name>rpc_error_create_with_stack</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>extra</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an RPC object representing an error condition with externally provided extracted stack trace.</para><para>It can hold data about numerical error code, string describing the actual error in human readable format and extra auxiliary data.</para><para>Extra is an optional argument and can be safely set to NULL when not needed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical error code. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>String representing an actual error description. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra data (optional). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para>Externally provided stack trace of an error. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a7c8e7458d5d06473b817f9a7316c7132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_error_get_code</definition>
        <argsstring>(rpc_object_t error)</argsstring>
        <name>rpc_error_get_code</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns numerical error code of a provided error object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Input error object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Numerical error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a2bb21a0e2e9f46a072b13c3525bd0792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpc_error_get_message</definition>
        <argsstring>(rpc_object_t error)</argsstring>
        <name>rpc_error_get_message</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns string description of a provided error object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Input error object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String description of an error condition. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ad6f7b09153f903b78c1a93b9e4938350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_error_get_extra</definition>
        <argsstring>(rpc_object_t error)</argsstring>
        <name>rpc_error_get_extra</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an extra (auxiliary data) set during creation of a provided provided error object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Input error object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Extra data attached to an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a388db2244bb129cd3a783b1a50822c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_error_set_extra</definition>
        <argsstring>(rpc_object_t error, rpc_object_t extra)</argsstring>
        <name>rpc_error_set_extra</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets an extra data attached to an error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Input error object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra data to be attached to an error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a05a79628ec5a59dfc8d735ac08a83f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_error_get_stack</definition>
        <argsstring>(rpc_object_t error)</argsstring>
        <name>rpc_error_get_stack</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a stack trace associated with an error condition of a provided error object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Input error object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stack trace of an error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a2d3b7789a013d7084663fc2f241b6d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_dictionary_create</definition>
        <argsstring>(void)</argsstring>
        <name>rpc_dictionary_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, empty dictionary of objects.</para><para><simplesect kind="return"><para>Empty dictionary. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a8428569b3059a2939c8c7121df0d3400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_dictionary_create_ex</definition>
        <argsstring>(const char *const *keys, const rpc_object_t *values, size_t count, bool steal)</argsstring>
        <name>rpc_dictionary_create_ex</name>
        <param>
          <type>const char *const *</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const <ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref> *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>steal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new dictionary of objects, optionally populating it with data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of keys associated with values to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of objects to insert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items in values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>steal</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference vs. reference and increment refcount of elements in values. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a932082c08de1ae9aca29778dc259f8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_value</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, rpc_object_t value)</argsstring>
        <name>rpc_dictionary_set_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts an object to an input dictionary at a given key and increments object&apos;s refcount.</para><para>If a key is already occupied, then a new object takes place of an old object and the refcount of an old object is decremented.</para><para>If an object is NULL, then this function removes an old object stored at a given key.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store a value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be inserted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a486874b7177c98b8e82580d4aac9530c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_steal_value</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, rpc_object_t value)</argsstring>
        <name>rpc_dictionary_steal_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts an object to an input dictionary at a given key.</para><para>If a key is already occupied, then a new object takes place of an old object and the refcount of an old object is decremented.</para><para>If an object is NULL, then this function removes an old object stored at a given key.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store a value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be inserted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a58b0d4747d853a75bdffd71a5235a9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_remove_key</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_remove_key</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes an object from a given key of a provided dictionary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a44da285d446d05bfc07f367caf22948f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_dictionary_detach_key</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_detach_key</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a key from dictionary and returns it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to be detached </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Detached object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ae2ffdb7864d2abc5313b33a1af1c19dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
        <definition>rpc_object_t rpc_dictionary_get_value</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_get_value</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an object held by a provided dictionary at a given key.</para><para>If a given key does not exist, then the function returns NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key of an object to be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object at a given key. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ab280f7c274f2428f819c87d457e090c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rpc_dictionary_get_count</definition>
        <argsstring>(rpc_object_t dictionary)</argsstring>
        <name>rpc_dictionary_get_count</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a number of elements in a provided dictionary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of elements held by an input dictionary. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1abc68776153fe2aee12d37c0623c5b94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_dictionary_apply</definition>
        <argsstring>(rpc_object_t dictionary, rpc_dictionary_applier_t applier)</argsstring>
        <name>rpc_dictionary_apply</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type><ref refid="object_8h_1affae185751cc133a978a305d97cd0c5a" kindref="member">rpc_dictionary_applier_t</ref></type>
          <declname>applier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates over a given dictionary. For each of elements executes an applier block, providing a current key and a current value as an applier block&apos;s arguments.</para><para>If an applier returns false, iteration is terminated and the function returns true (terminated). Otherwise the function iterates to the end of an input array and returns false (finished).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applier</parametername>
</parameternamelist>
<parameterdescription>
<para>Block to be executed for each of an dictionary&apos;s elements. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iteration terminated (true)/finished (false) boolean flag. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ab6f681344bbd81b61cc59866b4b6201f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_map</definition>
        <argsstring>(rpc_object_t dictionary, rpc_dictionary_mapper_t mapper)</argsstring>
        <name>rpc_dictionary_map</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>rpc_dictionary_mapper_t</type>
          <declname>mapper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mapper</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aa4994f9aee8421b3b3e310e19af9746a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_dictionary_has_key</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_has_key</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if an input dictionary does have a given key set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to be tested. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean check result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a2f2906bc0e54bce4cba3bfe90285b582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_bool</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, bool value)</argsstring>
        <name>rpc_dictionary_set_bool</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected key of an input dictionary to a newly created RPC object holding a given boolean value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (boolean). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a24e2f74d342e15eb8277ac6629d17a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_int64</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, int64_t value)</argsstring>
        <name>rpc_dictionary_set_int64</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected key of an input dictionary to a newly created RPC object holding a given 64-bit signed integer value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (64-bit signed integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ab526d14403ef53efae6d397aaea69ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_uint64</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, uint64_t value)</argsstring>
        <name>rpc_dictionary_set_uint64</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected key of an input dictionary to a newly created RPC object holding a given 64-bit unsigned integer value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (64-bit unsigned integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a354b88b2b98fa525da1212b770917b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_double</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, double value)</argsstring>
        <name>rpc_dictionary_set_double</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected key of an input dictionary to a newly created RPC object holding a given double value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (double). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a24f9779d17fda96d0562303145c4bf15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_date</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, int64_t value)</argsstring>
        <name>rpc_dictionary_set_date</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected key of an input dictionary to a newly created RPC object holding a given UNIX timestamp value represented as an integer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value (UNIX timestamp represented as an integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a03f1496e74201d134f90e3465c30a05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_data</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, const void *value, size_t length)</argsstring>
        <name>rpc_dictionary_set_data</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected key of an input dictionary to a newly created RPC object holding a given binary data of a specified length.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input binary data buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of an input data buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aaa3a73efec8f0d62513c37e8650da77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_string</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, const char *value)</argsstring>
        <name>rpc_dictionary_set_string</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected key of an input dictionary to a newly created RPC object holding a given string value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string (null byte terminated constant character pointer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aaa1d268468f916d6b771a349df9fe863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rpc_dictionary_set_fd</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, int value)</argsstring>
        <name>rpc_dictionary_set_fd</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a selected key of an input dictionary to a newly created RPC object holding a given file descriptor value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to store an input value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Input file descriptor (integer). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a126bb730c66bb6f5041618863f664004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rpc_dictionary_get_bool</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_get_bool</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_BOOL), then the function returns false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a3c00003d59872fe380ab08b1069c268f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t rpc_dictionary_get_int64</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_get_int64</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_INT64), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit signed integer value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1af8294bde819421a934d76087dbc1d196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t rpc_dictionary_get_uint64</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_get_uint64</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_UINT64), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>64-bit unsigned integer value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1512" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a0dc4a7120dddb1ab35657cda03c28955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rpc_dictionary_get_double</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_get_double</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_DOUBLE), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Double value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a6d9b4fdb1307098b39ba37cc4a89f02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t rpc_dictionary_get_date</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_get_date</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_DATE), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer representing a UNIX timestamp. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a718b7afc5188b051143d7b1509c4aba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* rpc_dictionary_get_data</definition>
        <argsstring>(rpc_object_t dictionary, const char *key, size_t *length)</argsstring>
        <name>rpc_dictionary_get_data</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_BINARY), then the function returns NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Output value&apos;s key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of an output buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Binary output buffer pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a4d0f09c328083503c263da0ab1604ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rpc_dictionary_get_string</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_get_string</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_STRING), then the function returns NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a4aee4950326fc01cbbe2243f48e196f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_dictionary_get_fd</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_get_fd</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a value from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_FD), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key storing an output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>File descriptor value (integer). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a1ce8270c2a63ce9cde4305dcf8bc04ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rpc_dictionary_dup_fd</definition>
        <argsstring>(rpc_object_t dictionary, const char *key)</argsstring>
        <name>rpc_dictionary_dup_fd</name>
        <param>
          <type><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref></type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicates a file descriptor from a given key of an input dictionary.</para><para>If a selected key does not exist, or object being held at a given key has a type different from expected (RPC_TYPE_FD), then the function returns 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor&apos;s key. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duplicated file descriptor (integer). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/code/include/rpc/object.h" line="1593" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Object model (boxed types) API. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2015-2017<sp/>Two<sp/>Pore<sp/>Guys,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>providing<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBRPC_OBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRPC_OBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/uio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_object;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="53" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea71dacfbd072b09e8cbb22055447b660d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea71dacfbd072b09e8cbb22055447b660d" kindref="member">RPC_TYPE_NULL</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea318fdf911250c3ae135bb51839ff033d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea318fdf911250c3ae135bb51839ff033d" kindref="member">RPC_TYPE_BOOL</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea12702811680ffcd89bee08bf546e37f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea12702811680ffcd89bee08bf546e37f6" kindref="member">RPC_TYPE_UINT64</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea1f5294f7ab642ef8e693a2728d0ad31a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea1f5294f7ab642ef8e693a2728d0ad31a" kindref="member">RPC_TYPE_INT64</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea81f15a333335dc830b45d39600491796" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea81f15a333335dc830b45d39600491796" kindref="member">RPC_TYPE_DOUBLE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea8526a0ec0f1f9f9b06dac23b1c6aecb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea8526a0ec0f1f9f9b06dac23b1c6aecb1" kindref="member">RPC_TYPE_DATE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea8689ddb6d2be1e10f55b946fc89c7383" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea8689ddb6d2be1e10f55b946fc89c7383" kindref="member">RPC_TYPE_STRING</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea25c2db26d03cddd947fd0b9486c66858" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea25c2db26d03cddd947fd0b9486c66858" kindref="member">RPC_TYPE_BINARY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea7035c0eb69dd595be19d90a2e3c48ea9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea7035c0eb69dd595be19d90a2e3c48ea9" kindref="member">RPC_TYPE_FD</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea5dd9c67e5ca75573ddac3129e5430386" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea5dd9c67e5ca75573ddac3129e5430386" kindref="member">RPC_TYPE_DICTIONARY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638eab4f0a2ba87efaf952a1008c0771d7f5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638eab4f0a2ba87efaf952a1008c0771d7f5a" kindref="member">RPC_TYPE_ARRAY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64" refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea7c63246a7c7bc5912d499fb117358506" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638ea7c63246a7c7bc5912d499fb117358506" kindref="member">RPC_TYPE_ERROR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor">#if<sp/>defined(__linux__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RPC_TYPE_SHMEM,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/><ref refid="object_8h_1a40ea3143863f0a2b47446ccaf655638e" kindref="member">rpc_type_t</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rpc_object<sp/>*<ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="object_8h_1ac685a2916978204cdac2bc8c855f7b00" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^<ref refid="object_8h_1ac685a2916978204cdac2bc8c855f7b00" kindref="member">rpc_array_applier_t</ref>)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>(^rpc_array_mapper_t)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="object_8h_1affae185751cc133a978a305d97cd0c5a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(^<ref refid="object_8h_1affae185751cc133a978a305d97cd0c5a" kindref="member">rpc_dictionary_applier_t</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ab365f726b4975c0c8376b808d111d01b" kindref="member">rpc_object_t</ref><sp/>(^rpc_dictionary_mapper_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="object_8h_1a37160a10fb9baee827063f3db977315d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(^<ref refid="object_8h_1a37160a10fb9baee827063f3db977315d" kindref="member">rpc_array_cmp_t</ref>)(rpc_object_t<sp/>o1,<sp/>rpc_object_t<sp/>o2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="object_8h_1a490b073d5f540379333d89d94e140b72" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(^<ref refid="object_8h_1a490b073d5f540379333d89d94e140b72" kindref="member">rpc_binary_destructor_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="object_8h_1a33c2b5ad21d20059d031e6a390021822" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_ARRAY_APPLIER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(size_t<sp/>_index,<sp/>rpc_object_t<sp/>_value)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_index,<sp/>_value));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="object_8h_1a814f85a172b4dae9c201063cad92514e" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_DICTIONARY_APPLIER(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(const<sp/>char<sp/>*_key,<sp/>rpc_object_t<sp/>_value)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((bool)_fn(_arg,<sp/>_key,<sp/>_value));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="object_8h_1af7b40854202a0a6708b0611b4fdf9121" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_ARRAY_CMP(_fn,<sp/>_arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(rpc_object_t<sp/>_o1,<sp/>rpc_object_t<sp/>_o2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>((int)_fn(_arg,<sp/>_o1,<sp/>_o2));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="object_8h_1a470d0e93b159810ff425aec90f47c817" refkind="member"><highlight class="preprocessor">#define<sp/>RPC_BINARY_DESTRUCTOR(_fn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>^(void<sp/>*block)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fn(block);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a9f5c8073f6c079852f39f409be1f777b" kindref="member">rpc_retain</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a2d85324f75b20628a5d32e8117277e18" kindref="member">rpc_release_impl</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a67e5a3ceea99d8b298a5b5d5f1051fcc" kindref="member">rpc_get_line_number</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a7928b2f9f75a9aa9dd033b52f1036d96" kindref="member">rpc_get_column_number</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1aa5de9854b486016a16ac230ae0ba1d3a" kindref="member">rpc_copy</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a1fd38947da5673eb2db4910878bebb36" kindref="member">rpc_cmp</ref>(rpc_object_t<sp/>o1,<sp/>rpc_object_t<sp/>o2);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a2f5ccf4e702bdfc6ff82fcac4ce18e84" kindref="member">rpc_equal</ref>(rpc_object_t<sp/>o1,<sp/>rpc_object_t<sp/>o2);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ab84acb5ad97a61ccc08548a3e5d85bc1" kindref="member">rpc_hash</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1a8687bd8dcf67458dbb09549d2a9b6059" kindref="member">rpc_copy_description</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">rpc_type_t<sp/><ref refid="object_8h_1a842969702ab17ad4b7e1b0c2ed9a4aef" kindref="member">rpc_get_type</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1af4605126ba11e2934cda5c18492d1d85" kindref="member">rpc_get_type_name</ref>(rpc_type_t<sp/>type);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="object_8h_1aa125ec0a73c4c9953b07e5da1712573e" refkind="member"><highlight class="preprocessor">#define<sp/>rpc_is_error(_object)<sp/><sp/><sp/>(rpc_get_type(_object)<sp/>==<sp/>RPC_TYPE_ERROR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="object_8h_1aac19be935f72b35eeb2851bc509eabb2" refkind="member"><highlight class="preprocessor">#define<sp/>rpc_release(_object)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rpc_release_impl(_object)<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_object)<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rpc_swap(_old,<sp/>_new)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpc_release(_old);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_old)<sp/>=<sp/>(_new);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a3041a1bbc93de9f4753ed5191d6a8f29" kindref="member">rpc_get_last_error</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1adde6020ca4c5be010850ca4295d1a4e5" kindref="member">rpc_object_from_json</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*frame,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a583eee9f2f5292677ec130a1b6746a32" kindref="member">rpc_object_to_json</ref>(rpc_object_t<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**frame,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a87da19ea6b0ec7daf50ce660162e26be" kindref="member">rpc_object_pack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a15bdca8f36858885773a6a1f717782fa" kindref="member">rpc_object_vpack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a522ca7df7ed77f09b7c4e9efea42ed83" kindref="member">rpc_object_unpack</ref>(rpc_object_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a583484fcddc086aa6eefbc6b0b86dd9b" kindref="member">rpc_object_vunpack</ref>(rpc_object_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a0a56b4b5320160f6cbcee59a034fa8f7" kindref="member">rpc_null_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a92cb61d1c1e25294fcbab898dff13b53" kindref="member">rpc_bool_create</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a8b7678e59eb5f76e136fdcc3b6158c39" kindref="member">rpc_bool_get_value</ref>(rpc_object_t<sp/>xbool);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1ad1ce3319d7b452bc5400518ff727a87f" kindref="member">rpc_int64_create</ref>(int64_t<sp/>value);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">int64_t<sp/><ref refid="object_8h_1a4d9f3fc2fe16b2a09b1f7b5fbcf78d99" kindref="member">rpc_int64_get_value</ref>(rpc_object_t<sp/>xint);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a38142d7d5e24b774c7cda93734d7f643" kindref="member">rpc_uint64_create</ref>(uint64_t<sp/>value);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">uint64_t<sp/><ref refid="object_8h_1a141bf4e57cabf5a2b15ab12a1a3c587d" kindref="member">rpc_uint64_get_value</ref>(rpc_object_t<sp/>xuint);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1ad327d0505386ea397aff6a2ffc9d4e52" kindref="member">rpc_double_create</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a44be10360860fa14d66037e92b19c600" kindref="member">rpc_double_get_value</ref>(rpc_object_t<sp/>xdouble);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a56c5b9ed4b759b484d612bc3bbcd5b69" kindref="member">rpc_date_create</ref>(int64_t<sp/>interval);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a3f7fe1bd56938b077470b8dc811a001a" kindref="member">rpc_date_create_from_current</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">int64_t<sp/><ref refid="object_8h_1a1d4007edcf66361777f074b8a79e8e12" kindref="member">rpc_date_get_value</ref>(rpc_object_t<sp/>xdate);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a7ea4b27c094778d16149e2aef65f25b9" kindref="member">rpc_data_create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1a490b073d5f540379333d89d94e140b72" kindref="member">rpc_binary_destructor_t</ref><sp/>destructor);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a78262ca3dea42ec4757c1ec2a3db9eb1" kindref="member">rpc_data_create_iov</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>iovec<sp/>*iov,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>niov);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a17b4b5077bb28dad2b678e64001c6824" kindref="member">rpc_data_get_length</ref>(rpc_object_t<sp/>xdata);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1a626c045e08849189e2d75f191ce6c903" kindref="member">rpc_data_get_bytes_ptr</ref>(rpc_object_t<sp/>xdata);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a0453cb25c7fbeffd9151bfd8960c1656" kindref="member">rpc_data_get_bytes</ref>(rpc_object_t<sp/>xdata,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>off,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1adb3c34ac47a7c15a41758ca1de5ab356" kindref="member">rpc_string_create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1ae6d2218dce384ad5f90e6c3cf2c4d93b" kindref="member">rpc_string_create_len</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a8cbd21846d3957acd8dffe43b9b7e442" kindref="member">rpc_string_create_with_format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a9db6feb6897323de3c3d6d6137a1a6c2" kindref="member">rpc_string_create_with_format_and_arguments</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="object_8h_1abb26dd739074c3d16a9555fcd054ac0a" kindref="member">rpc_string_get_length</ref>(rpc_object_t<sp/>xstring);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1a98c3ec0132389e4a30d208894578b83c" kindref="member">rpc_string_get_string_ptr</ref>(rpc_object_t<sp/>xstring);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1ab0a4b1ae9e282c596c40c41fb025fa4a" kindref="member">rpc_fd_create</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a3343e6a1513fec2541dcb1027581a64c" kindref="member">rpc_fd_dup</ref>(rpc_object_t<sp/>xfd);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aa3cfb922c202ab7b6e574a4db79143ff" kindref="member">rpc_fd_get_value</ref>(rpc_object_t<sp/>xfd);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a0c717b38ae14f998362fc3969ed5f54e" kindref="member">rpc_array_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1aef23f0b3d4302c2ff1e26f495137644b" kindref="member">rpc_array_create_ex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rpc_object_t<sp/>*objects,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>steal);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a140729688c5772adc7f345cc51448d1f" kindref="member">rpc_array_set_value</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aeb892aa166cc1e6d9834c8bb8ebbf435" kindref="member">rpc_array_steal_value</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a4c2fe7fb304ed1ac9f1729faa8d7e501" kindref="member">rpc_array_remove_index</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a9da12b0343c47a16a0356d5ba355a32c" kindref="member">rpc_array_append_value</ref>(rpc_object_t<sp/>array,<sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a446bace2d79bfd63d985e8bf97d284ff" kindref="member">rpc_array_append_stolen_value</ref>(rpc_object_t<sp/>array,<sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a4fbba33994188dff303718ac07f137fc" kindref="member">rpc_array_get_value</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ac6d963cbeefa944666692696aebc663a" kindref="member">rpc_array_get_count</ref>(rpc_object_t<sp/>array);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a8a6a6a91d7e5ccdadf4ae08d6aed1a2a" kindref="member">rpc_array_apply</ref>(rpc_object_t<sp/>array,<sp/><ref refid="object_8h_1ac685a2916978204cdac2bc8c855f7b00" kindref="member">rpc_array_applier_t</ref><sp/>applier);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ab45e3b1cd2938d9ba037ed6557071423" kindref="member">rpc_array_map</ref>(rpc_object_t<sp/>array,<sp/>rpc_array_mapper_t<sp/>mapper);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a37244ac71308e8f4e3d886727211c371" kindref="member">rpc_array_contains</ref>(rpc_object_t<sp/>array,<sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aa3abd89de4c7dc3d5d20ed624cf5f748" kindref="member">rpc_array_reverse_apply</ref>(rpc_object_t<sp/>array,<sp/><ref refid="object_8h_1ac685a2916978204cdac2bc8c855f7b00" kindref="member">rpc_array_applier_t</ref><sp/>applier);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aaa8222bb9416af081f44cef36b8f0161" kindref="member">rpc_array_sort</ref>(rpc_object_t<sp/>array,<sp/><ref refid="object_8h_1a37160a10fb9baee827063f3db977315d" kindref="member">rpc_array_cmp_t</ref><sp/>comparator);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a2e6be4443b432a011f9858f005ea00cd" kindref="member">rpc_array_slice</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/>ssize_t<sp/>len);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a9dbe873eb749066483c87f47427baa66" kindref="member">rpc_array_set_bool</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aa6710620f1acde01dd62c467a44f18c2" kindref="member">rpc_array_set_int64</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>int64_t<sp/>value);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a360d2e8c74227b576f95f9aa3f6e0138" kindref="member">rpc_array_set_uint64</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>uint64_t<sp/>value);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ad0a9648195928da0978c15e8b8736e5a" kindref="member">rpc_array_set_double</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aaeec0f05e4409680172b54e715f2ff44" kindref="member">rpc_array_set_date</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>int64_t<sp/>value);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1adad50da5c5a3a2eaf33a85cbf5218d27" kindref="member">rpc_array_set_data</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bytes,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a18b175344695a268401293da46e40c0d" kindref="member">rpc_array_set_string</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aab29b896749f1f7427f1addfde3125f9" kindref="member">rpc_array_set_fd</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a5b743b07aa7cbad62b77e0b812e79e0e" kindref="member">rpc_array_get_bool</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">int64_t<sp/><ref refid="object_8h_1a16b71175e32e6aeed71d49dc04de69af" kindref="member">rpc_array_get_int64</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal">uint64_t<sp/><ref refid="object_8h_1ae01fab09becaf8d57b36a124e1410b09" kindref="member">rpc_array_get_uint64</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ae1d0f58ae6388c7eac92906c14fdc61a" kindref="member">rpc_array_get_double</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal">int64_t<sp/><ref refid="object_8h_1a084b46af068b5c48dbd3e4f08a995dd9" kindref="member">rpc_array_get_date</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1a90cb248aeac4a38990a1b91fdc022ffc" kindref="member">rpc_array_get_data</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*length);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1a01e6ca99a87a802b012c9120489d5894" kindref="member">rpc_array_get_string</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a96459be40290e65692aaebc15ed6b1de" kindref="member">rpc_array_get_fd</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a951a49f2e19cfc0296afae62af9dd72f" kindref="member">rpc_array_dup_fd</ref>(rpc_object_t<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__linux__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal">rpc_object_t<sp/>rpc_shmem_create(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*rpc_shmem_map(rpc_object_t<sp/>shmem);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rpc_shmem_unmap(rpc_object_t<sp/>shmem,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rpc_shmem_get_size(rpc_object_t<sp/>shmem);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1ae97f0c2a0033d6b538bd48f79c105931" kindref="member">rpc_error_create</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>rpc_object_t<sp/>extra);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a3e2bba92d67fd012fb097fdb8f098df7" kindref="member">rpc_error_create_with_stack</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>rpc_object_t<sp/>extra,<sp/>rpc_object_t<sp/>stack);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a7c8e7458d5d06473b817f9a7316c7132" kindref="member">rpc_error_get_code</ref>(rpc_object_t<sp/>error);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1a2bb21a0e2e9f46a072b13c3525bd0792" kindref="member">rpc_error_get_message</ref>(rpc_object_t<sp/>error);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1ad6f7b09153f903b78c1a93b9e4938350" kindref="member">rpc_error_get_extra</ref>(rpc_object_t<sp/>error);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a388db2244bb129cd3a783b1a50822c4c" kindref="member">rpc_error_set_extra</ref>(rpc_object_t<sp/>error,<sp/>rpc_object_t<sp/>extra);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a05a79628ec5a59dfc8d735ac08a83f42" kindref="member">rpc_error_get_stack</ref>(rpc_object_t<sp/>error);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a2d3b7789a013d7084663fc2f241b6d2c" kindref="member">rpc_dictionary_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a8428569b3059a2939c8c7121df0d3400" kindref="member">rpc_dictionary_create_ex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*keys,</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rpc_object_t<sp/>*values,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>steal);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a932082c08de1ae9aca29778dc259f8c9" kindref="member">rpc_dictionary_set_value</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a486874b7177c98b8e82580d4aac9530c" kindref="member">rpc_dictionary_steal_value</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>rpc_object_t<sp/>value);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a58b0d4747d853a75bdffd71a5235a9ba" kindref="member">rpc_dictionary_remove_key</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1a44da285d446d05bfc07f367caf22948f" kindref="member">rpc_dictionary_detach_key</ref>(rpc_object_t<sp/>dictionary,</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal">rpc_object_t<sp/><ref refid="object_8h_1ae2ffdb7864d2abc5313b33a1af1c19dd" kindref="member">rpc_dictionary_get_value</ref>(rpc_object_t<sp/>dictionary,</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ab280f7c274f2428f819c87d457e090c4" kindref="member">rpc_dictionary_get_count</ref>(rpc_object_t<sp/>dictionary);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1abc68776153fe2aee12d37c0623c5b94f" kindref="member">rpc_dictionary_apply</ref>(rpc_object_t<sp/>dictionary,</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="object_8h_1affae185751cc133a978a305d97cd0c5a" kindref="member">rpc_dictionary_applier_t</ref><sp/>applier);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ab6f681344bbd81b61cc59866b4b6201f" kindref="member">rpc_dictionary_map</ref>(rpc_object_t<sp/>dictionary,</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>rpc_dictionary_mapper_t<sp/>mapper);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aa4994f9aee8421b3b3e310e19af9746a" kindref="member">rpc_dictionary_has_key</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a2f2906bc0e54bce4cba3bfe90285b582" kindref="member">rpc_dictionary_set_bool</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a24e2f74d342e15eb8277ac6629d17a46" kindref="member">rpc_dictionary_set_int64</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>value);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1ab526d14403ef53efae6d397aaea69ffb" kindref="member">rpc_dictionary_set_uint64</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>value);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a354b88b2b98fa525da1212b770917b55" kindref="member">rpc_dictionary_set_double</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a24f9779d17fda96d0562303145c4bf15" kindref="member">rpc_dictionary_set_date</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>value);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a03f1496e74201d134f90e3465c30a05d" kindref="member">rpc_dictionary_set_data</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aaa3a73efec8f0d62513c37e8650da77c" kindref="member">rpc_dictionary_set_string</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="object_8h_1aaa1d268468f916d6b771a349df9fe863" kindref="member">rpc_dictionary_set_fd</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a126bb730c66bb6f5041618863f664004" kindref="member">rpc_dictionary_get_bool</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal">int64_t<sp/><ref refid="object_8h_1a3c00003d59872fe380ab08b1069c268f" kindref="member">rpc_dictionary_get_int64</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal">uint64_t<sp/><ref refid="object_8h_1af8294bde819421a934d76087dbc1d196" kindref="member">rpc_dictionary_get_uint64</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a0dc4a7120dddb1ab35657cda03c28955" kindref="member">rpc_dictionary_get_double</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal">int64_t<sp/><ref refid="object_8h_1a6d9b4fdb1307098b39ba37cc4a89f02d" kindref="member">rpc_dictionary_get_date</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1a718b7afc5188b051143d7b1509c4aba4" kindref="member">rpc_dictionary_get_data</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*length);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="object_8h_1a4d0f09c328083503c263da0ab1604ea8" kindref="member">rpc_dictionary_get_string</ref>(rpc_object_t<sp/>dictionary,</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a4aee4950326fc01cbbe2243f48e196f6" kindref="member">rpc_dictionary_get_fd</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="object_8h_1a1ce8270c2a63ce9cde4305dcf8bc04ce" kindref="member">rpc_dictionary_dup_fd</ref>(rpc_object_t<sp/>dictionary,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//LIBRPC_OBJECT_H</highlight></codeline>
    </programlisting>
    <location file="/code/include/rpc/object.h"/>
  </compounddef>
</doxygen>
